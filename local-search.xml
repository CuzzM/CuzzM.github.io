<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>spring5</title>
    <link href="/2022/07/10/spring5/"/>
    <url>/2022/07/10/spring5/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Spring的概念"><a href="#1-Spring的概念" class="headerlink" title="1. Spring的概念"></a>1. Spring的概念</h1><h2 id="1-1-Spring概述"><a href="#1-1-Spring概述" class="headerlink" title="1.1 Spring概述"></a>1.1 Spring概述</h2><ul><li>Spring是JavaEE编程领域的一个<strong>轻量级开源框架</strong></li><li>Spring框架的核心功能是IOC和AOP</li></ul><h2 id="1-2-Spring核心功能"><a href="#1-2-Spring核心功能" class="headerlink" title="1.2 Spring核心功能"></a>1.2 Spring核心功能</h2><ol><li><strong>IOC</strong>: Inversion ofControl 控制反转，将创建对象的过程交给容器</li><li><strong>AOP</strong>: Aspect Oriented Programming： 面向切面编程，不修改源代码对代码的功能进行增强</li></ol><h2 id="1-3-Spring特点"><a href="#1-3-Spring特点" class="headerlink" title="1.3 Spring特点"></a>1.3 Spring特点</h2><ol><li><strong>方便解耦，简化开发</strong></li><li><strong>AOP编程的支持</strong></li><li><strong>声明式事务的支持</strong></li><li><strong>方便程序的测试</strong></li><li><strong>方便集成各种优秀的框架</strong></li></ol><h1 id="2-IOC容器"><a href="#2-IOC容器" class="headerlink" title="2. IOC容器"></a>2. IOC容器</h1><h2 id="2-1-IOC概念和原理"><a href="#2-1-IOC概念和原理" class="headerlink" title="2.1 IOC概念和原理"></a>2.1 IOC概念和原理</h2><blockquote><p>2.1.1 什么是IOC</p></blockquote><ol><li>控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IOC目的： 为了降低耦合度</li></ol><blockquote><p>2.1.2 IOC底层原理</p></blockquote><ol><li>xml解析、工厂模块、反射</li></ol><blockquote><p>2.1.3 图解IOC底层原理</p></blockquote><p>传统方式调用:</p><p><img src="/2022/07/10/spring5/image-20220710103741121.png" alt="image-20220710103741121"></p><p>工厂模块调用:</p><p><img src="/2022/07/10/spring5/image-20220710104150958.png" alt="image-20220710104150958"></p><h2 id="2-2-IOC过程"><a href="#2-2-IOC过程" class="headerlink" title="2.2 IOC过程"></a>2.2 IOC过程</h2><ol><li>xml配置文件，创建配置的对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userdao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>有service类和dao类，创建工厂类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">classValue</span> <span class="hljs-operator">=</span> class属性值; <span class="hljs-comment">//通过xmk解析完成</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">class</span> <span class="hljs-operator">=</span> Class.forName(classValue); <span class="hljs-comment">//通过反射获取类对象</span><br>    <span class="hljs-keyword">return</span> (UserDao)class.newInstance(); <span class="hljs-comment">//通过类对象创建类实例</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-IOC-接口"><a href="#2-3-IOC-接口" class="headerlink" title="2.3 IOC(接口)"></a>2.3 IOC(接口)</h2><ol><li><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p></li><li><p>Spring提供IOC容器实现两种方式:（两个接口）</p><ul><li>BeanFactory: IOC容器基本实现，是Spring内部的使用接口，不提供开发人员使用，<strong>加载配置文件时候不会创建对象，在获取对象才会创建对象</strong></li><li>ApplicationContext： BeanFactory接口的子接口，提供更多强大的功能，一般由开发人员进行使用，<strong>加载配置文件的时候就会创建对象</strong></li></ul></li><li><p>ApplicationContext实现类</p></li></ol><h2 id="2-4-IOC操作Bean管理"><a href="#2-4-IOC操作Bean管理" class="headerlink" title="2.4 IOC操作Bean管理"></a>2.4 IOC操作Bean管理</h2><blockquote><p>初始User类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>什么是Bean管理</strong></p><ol><li>Spring创建对象</li><li>Spring注入属性</li></ol><p><strong>Bean管理操作两种实现方式</strong></p><ol><li>基于xml配置文件方式实现</li><li>基于注解方式</li></ol><blockquote><p>2.4.1 基于xml方式创建对象</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在spring配置文件中，使用标签，标签里面添加对应属性，就可以实现对象的创建</li><li>在bean标签中有很多属性，介绍创建的属性</li></ol><ul><li><strong>id属性:</strong> 唯一标识</li><li><strong>class属性:</strong> 类的全路径</li></ul><ol start="3"><li>通过对象时候，默认也是执行无参构造方法创建对象</li></ol><blockquote><p>2.4.2 基于xml方式注入属性</p></blockquote><ol><li>DI: 依赖注入，就是注入属性</li></ol><ul><li><p><strong>方式1</strong>: 使用setter()方法注入</p><p> 第一步: 创建对象定义，里面添加setter()方法</p><p> 第二步: 修改xml配置文件，使用property属性来使用</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zjw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>方式2</strong>: 有参构造注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span> &gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lyt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;17&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;specialUser&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>方式3</strong>: 使用p名称空间注入(了解即可)</li></ul><h2 id="2-5-xml方式注入特殊属性值"><a href="#2-5-xml方式注入特殊属性值" class="headerlink" title="2.5 xml方式注入特殊属性值"></a>2.5 xml方式注入特殊属性值</h2><blockquote><p>2.5.1 注入空值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5.2 属性值中有特殊符号</p></blockquote><ul><li>方式1: 使用转义字符</li><li>方式2: CDATA</li></ul><blockquote><p>2.5.3 注入属性—外部bean</p></blockquote><ol><li>创建两个类service类和dao类</li><li>在service调用dao里面的方法</li></ol><p><strong>使用ref来注入外部bean，ref引用的意思</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.service.UserService&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.dao.UserDaoImpl&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5.4 注入属性–内部Bean</p></blockquote><ol><li>以部门和员工为例，一个部门可以有多个员工，员工属于某一个部门</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Department department;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer name;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 内部bean--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Employee&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zjw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--嵌套定义--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;department&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Department&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5.5 注入属性–级联赋值</p></blockquote><p><strong>上面的代码就是级联赋值</strong></p><blockquote><p>2.5.6 注入集合</p></blockquote><ol><li>注入数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 数组类型注入 --&gt;<br>   &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> class=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;<br>       &lt;property name=<span class="hljs-string">&quot;friends&quot;</span>&gt;<br>           &lt;array&gt;<br>               &lt;value&gt;Alex&lt;/value&gt;<br>               &lt;value&gt;Joker&lt;/value&gt;<br>           &lt;/array&gt;<br>       &lt;/property&gt;<br>   &lt;/bean&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>注入List集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 注入list类型 --&gt;<br>&lt;property name=<span class="hljs-string">&quot;courses&quot;</span>&gt;<br>    &lt;list&gt;<br>        &lt;value&gt;线性代数&lt;/value&gt;<br>        &lt;value&gt;高等数学&lt;/value&gt;<br>    &lt;/list&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>注入Map集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">&lt;property name=<span class="hljs-string">&quot;maps&quot;</span>&gt;<br>    &lt;map&gt;<br>        &lt;entry key=<span class="hljs-string">&quot;PHT&quot;</span> value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;&lt;/entry&gt;<br>        &lt;entry key=<span class="hljs-string">&quot;JAVA&quot;</span> value=<span class="hljs-string">&quot;java&quot;</span>&gt;&lt;/entry&gt;<br>    &lt;/map&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>在集合中使用对象类型</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">propertry</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span> = <span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-IOC管理Bean"><a href="#2-6-IOC管理Bean" class="headerlink" title="2.6 IOC管理Bean"></a>2.6 IOC管理Bean</h2><p>bean分为两种:</p><ul><li>普通Bean   xml中定义Bean的类型就是返回的类型</li><li>工厂Bean   配合的类型和返回的类型不一样</li></ul><ol><li>创建类，让这个类作为工厂bean，实现接口FactoryBean</li><li>实现接口里面的方法，在实现的方法中定义返回的Bean类型</li></ol><p><strong>工厂Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义返回Bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">18</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-7-Bean的作用域"><a href="#2-7-Bean的作用域" class="headerlink" title="2.7 Bean的作用域"></a>2.7 Bean的作用域</h2><p><img src="/2022/07/10/spring5/image-20220710163252902.png" alt="image-20220710163252902"></p><h2 id="2-8-Bean的生命周期"><a href="#2-8-Bean的生命周期" class="headerlink" title="2.8 Bean的生命周期"></a>2.8 Bean的生命周期</h2><p>Bean的生命周期: 从对象的创建——&gt; 对象的销毁</p><ol><li>通过构造器创建bean实例</li><li>为bean里面的属性设置值和对其它bean的引用</li><li>调用bean的初始化方法</li><li>bean 就可以使用了</li><li>对象销毁</li></ol><p><img src="/2022/07/10/spring5/image-20220710164732702.png" alt="image-20220710164732702"></p><h2 id="2-9-xml自动装配"><a href="#2-9-xml自动装配" class="headerlink" title="2.9 xml自动装配"></a>2.9 xml自动装配</h2><p><strong>什么是自动装配</strong></p><ol><li><p>根据指定装配规则(属性名或者属性类型),Spring自动将匹配的类型注入</p></li><li><p>演示自动装配过程</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;alex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>autowire &#x3D; byName 判断条件 bean的id值和类属性里面的id值一样</li><li>autowire &#x3D; byType 判断条件是根据类型进行判断，如果类型有多个则无法判断</li></ul><h2 id="2-10-基于注解方式实现"><a href="#2-10-基于注解方式实现" class="headerlink" title="2.10 基于注解方式实现"></a>2.10 基于注解方式实现</h2><p>Spring针对Bean管理中创建对象提供的注解</p><ul><li>@Component   基础注解</li><li>@Service           建议放在service层</li><li>@Controller      建议放在Controller层</li><li>@Repository     建议放在dao层</li></ul><p><strong>上面的四个注解功能是一样的，都可以用来创建bean实例</strong></p><blockquote><p>基于注解方式实现对象创建</p></blockquote><ol><li>引入AOP依赖</li><li>开启组件扫码 <strong>Component-sacn</strong></li><li>创建类，在类上面添加上面四个注解中的一个</li></ol><blockquote><p>精确配置扫码</p></blockquote><p><img src="/2022/07/10/spring5/image-20220710203346892.png" alt="image-20220710203346892"></p><blockquote><p>基于注解方式实现属性注入</p></blockquote><ul><li><p>@AutoWired</p><p><strong>根据属性类型进行自动装配</strong></p></li><li><p>@Qualifier</p><p><strong>根据属性名称自动注入</strong>,这个注解要和@AutoWired一起使用</p></li><li><p>@Resource</p><p><strong>可以根据类型注入，可以根据名称注入</strong></p></li><li><p>@Value</p><p>针对普通类型的注入</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br><br>===================================================================<br>    <br><span class="hljs-meta">@Repository(value = &quot;userDaoImpl0&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;实现了add()&quot;</span>);<br>    &#125;<br>&#125;<br><br>===================================================================<br>    <br><span class="hljs-meta">@Repository(value = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1.........&quot;</span>);<br>    &#125;<br>&#125;<br><br>====================================================================<br>    <br><span class="hljs-meta">@Service(value = &quot;uService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>如果一个接口有多个实现类，那么使用autowired就会自动装配失败，运行时会出现下面bug</li></ol><img src="/2022/07/10/spring5/07/10/spring5/image-20220710204724151.png" class title=".&#x2F;image-20220710204724151"><ol start="2"><li>Resouce默认时根据类型进行注入，name指定值后根据名称进行注入</li></ol><blockquote><p>完全注解开发，使用SpringConfig文件代替xml配置文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.zjw&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>      <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;uService&quot;</span>,UserService.class);<br><br>      userService.add();<br><br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="3-Aop"><a href="#3-Aop" class="headerlink" title="3. Aop"></a>3. Aop</h1><h1 id="4-JdbcTemplate"><a href="#4-JdbcTemplate" class="headerlink" title="4. JdbcTemplate"></a>4. JdbcTemplate</h1><h1 id="5-事务管理"><a href="#5-事务管理" class="headerlink" title="5. 事务管理"></a>5. 事务管理</h1><h1 id="6-Spring5新特性"><a href="#6-Spring5新特性" class="headerlink" title="6. Spring5新特性"></a>6. Spring5新特性</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="1-设计模式概述"><a href="#1-设计模式概述" class="headerlink" title="1. 设计模式概述"></a>1. 设计模式概述</h1><h2 id="1-1-设计模式目的"><a href="#1-1-设计模式目的" class="headerlink" title="1.1 设计模式目的"></a>1.1 设计模式目的</h2><p>使程序具有以下几个更好的特性</p><ul><li>代码重用性</li><li>可读性</li><li>可扩展性</li><li>可靠性</li><li>使程序呈现高内聚、低耦合的特性</li></ul><h2 id="1-2-设计模式七大原则"><a href="#1-2-设计模式七大原则" class="headerlink" title="1.2 设计模式七大原则"></a>1.2 设计模式七大原则</h2><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒置原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li><li>合成复用原则</li></ol><h1 id="2-七大原则"><a href="#2-七大原则" class="headerlink" title="2.七大原则"></a>2.七大原则</h1><h2 id="2-1-单一职责原则"><a href="#2-1-单一职责原则" class="headerlink" title="2.1 单一职责原则"></a>2.1 单一职责原则</h2><p>​    <strong>对类来说，一个类应该只负责一个或者一项职责。</strong></p><h2 id="2-2-接口隔离原则"><a href="#2-2-接口隔离原则" class="headerlink" title="2.2 接口隔离原则"></a>2.2 接口隔离原则</h2><p>​    <strong>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</strong></p><p><img src="/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220620171323633.png" alt="image-20220620171323633"></p><p>最佳实践是:</p><p><img src="/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220620180748854.png" alt="image-20220620180748854"></p><h2 id="2-3-依赖倒转原则"><a href="#2-3-依赖倒转原则" class="headerlink" title="2.3 依赖倒转原则"></a>2.3 依赖倒转原则</h2><ol><li>高层模块不应该依赖底层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖于细节，细节应该依赖抽象</li><li>依赖倒转的中心思想是面向接口编程</li></ol><h2 id="2-4-里氏替换原则"><a href="#2-4-里氏替换原则" class="headerlink" title="2.4 里氏替换原则"></a>2.4 里氏替换原则</h2><ol><li>父类中实现的方法，之类最好不要重写</li><li>使用继承增加了对象间的耦合关系</li><li>在适当的情况下，可以通过聚合，组合，依赖来解决问题</li></ol><h2 id="2-5-开闭原则"><a href="#2-5-开闭原则" class="headerlink" title="2.5 开闭原则"></a>2.5 开闭原则</h2><ol><li>一个软件实体如类，模块和函数应该对扩展开放，对修改关闭。用抽象构建框架，用实现扩展细节</li><li>当软件需要发送变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li></ol><h2 id="2-6-迪米特法则"><a href="#2-6-迪米特法则" class="headerlink" title="2.6 迪米特法则"></a>2.6 迪米特法则</h2><ol><li>一个对象应该对其它对象保持最少的了解</li><li>类与类关系越密切，耦合度越大</li><li>最少知道原则，即一个类对自己依赖的类知道的越少越好。</li><li>只与直接朋友通信</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2022/04/23/docker/"/>
    <url>/2022/04/23/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="1-docker镜像基本操作"><a href="#1-docker镜像基本操作" class="headerlink" title="1. docker镜像基本操作"></a>1. docker镜像基本操作</h1><h2 id="1-1-docker辅助命令"><a href="#1-1-docker辅助命令" class="headerlink" title="1.1 docker辅助命令"></a>1.1 docker辅助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用来展示docker信息</span><br>docker info<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本号</span><br>docer version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker所有帮助命令</span><br>docker --help<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker命令格式  []-&gt;代表可选的</span><br>docker [options] command<br></code></pre></td></tr></table></figure><h2 id="1-2-操作镜像的相关命令"><a href="#1-2-操作镜像的相关命令" class="headerlink" title="1.2 操作镜像的相关命令"></a>1.2 操作镜像的相关命令</h2><blockquote><p>1.查看本地镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地仓库中存在哪些镜像</span><br>docker images<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看一个镜像名的所有版本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以查出mysql:5.6 mysql:x.x</span><br>docker images mysql<br></code></pre></td></tr></table></figure><p><img src="/2022/04/23/docker/image-20220423134337961.png" alt="image-20220423134337961"></p><ul><li>REPOSITORY: 镜像名称</li><li>TAG: 版本</li><li>IMAGE ID: 镜像ID</li><li>CREATED: 镜像创建时间</li><li>SIZE: 镜像大小</li></ul><blockquote><p>2.拉取镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这是第一种方式,通过摘要也可以</span><br>docker pull 镜像名[:tag]<br>docker pull mysql:5.6.50<br></code></pre></td></tr></table></figure><blockquote><p>3.通过命令行搜索需要的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search 镜像名<br></code></pre></td></tr></table></figure><blockquote><p>4.删除镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除镜像</span><br>docker image rm name:tag | IMAGE ID<br>dokcer image rm -f name:tag | IMAGE ID<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除镜像的简化写法</span><br>docker rmi name:tag | image ID<br>docker rmi -f name:tag | image ID<br></code></pre></td></tr></table></figure><ul><li>要理解一个概念,再删除时如果我们删除可能会报下面错误,因为<strong>镜像时 容器的模板</strong>,容器就是运行时镜像</li></ul><p>Error response from daemon: conflict: unable to remove repository reference “hello-world:latest” (must force) - container 1170d6aadeb5 is using its referenced image feb5d9fea6a5</p><p>因为我们可以使用强制删除</p><blockquote><p>5.组合删除</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除所有镜像</span><br>docker rmi -f $(docker images -aq)<br></code></pre></td></tr></table></figure><h1 id="2-容器的相关命令"><a href="#2-容器的相关命令" class="headerlink" title="2. 容器的相关命令"></a>2. 容器的相关命令</h1><blockquote><p>1.将打包tar镜像文件导入自己的docker仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;imageName&gt; -&gt; 镜像名</span><br>docker load -i &lt;imageName&gt;<br><br>dokcer load -i redis-5.0.10.tar<br></code></pre></td></tr></table></figure><blockquote><p>2.运行容器、端口映射、后台启动、别名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以tomcat为例去运行容器</span><br>docker run &lt;imageName:tag | imageId&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最简单方式运行容器</span><br>docker run tomcat:x.x<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口映射</span><br>docker run -p 8080(外部端口):8080(容器内服务监听端口) tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">后台启动,运行会会给我们返回一个容器ID</span><br>docker run -p 8080:8080 -d(后台启动) tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">起一个唯一标识</span><br>docker run -p 8080:8080 -d --name mysql01 tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><blockquote><p>3.查看容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br><br>docker ps --help<br></code></pre></td></tr></table></figure><blockquote><p>4.关闭、启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭容器</span><br>docker stop &lt;containerId | name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br>docker start &lt;containerId | name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker restart &lt;containerId | name&gt;<br></code></pre></td></tr></table></figure><p><img src="/2022/04/23/docker/image-20220423175349258.png" alt="image-20220423175349258"></p><blockquote><p>5.删除容器</p></blockquote><p>1.删除停止的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm &lt;containerId | name&gt;<br></code></pre></td></tr></table></figure><p>2.删除正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f &lt;containerId | name&gt;<br></code></pre></td></tr></table></figure><p>3.删除所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f $(docker ps -aq)<br></code></pre></td></tr></table></figure><blockquote><p>6.容器日志</p></blockquote><p>1.查看容器内服务运行日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日志</span><br>docker logs &lt;containerId&gt; | &lt;name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">实时展示日志</span><br>docker logs -f &lt;containerId&gt; | &lt;name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">展示日志最后n行</span><br>docker logs -n [number] &lt;containerId&gt;<br></code></pre></td></tr></table></figure><blockquote><p>7.容器交互</p></blockquote><p>1.查看容器内的进程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker top <span class="hljs-tag">&lt;<span class="hljs-name">containerId</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.进入容器内部交互</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker exex -it <span class="hljs-tag">&lt;<span class="hljs-name">containerId</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> bash<br></code></pre></td></tr></table></figure><p>3.退出容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>4.操作系统与容器内的文件交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1. 复制容器中的文件到宿主机中</span><br>docker cp &lt;容器唯一标识&gt;:容器内资源路径 操作系统中的路径<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. 赋值宿主机中的文件到容器中</span><br>docker cp 文件|目录名 容器唯一标识:容器内资源路径<br></code></pre></td></tr></table></figure><p>5.查看容器内部细节</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">docker inspect <span class="hljs-attribute">&lt;容器唯一标识&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>8.数据卷Volume</p></blockquote><p>作用: 实现宿主机系统与容器之间的文件共享</p><p><img src="/2022/04/23/docker/image-20220423191451369.png" alt="image-20220423191451369"></p><p>数据卷的使用方式(在容器 运行时)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 宿主机目录:容器目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这是方式一:自定义数据卷目录</span><br><br>docker run -d -p 8080:8080 --name tomcat01 -v /home/apps/:/usr/local/tomcat/webapps tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><p>使用数据卷后,可以通过修改外部的宿主机文件来同步容器的文件,容器中原本的文件就没有了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二 自动数据卷目录</span><br>docker run -d -p 8080:8080 --name tomcat02 -v aa:/usr/local/tomcat/webapps tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><p>注意:</p><ol><li>aa代表一个数据卷名称,名称可以随便写,docker在不存在时胡自动创建这个数据卷同时自动映射宿主机中某个目录</li><li>同时在容器启动时会将aa对应容器目录中的内容辅助到aa中</li></ol><blockquote><p>9.将容器打包成一个新的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将正在运行的容器打包成一个镜像</span><br>docker commit -m “描述信息” -a “作者” 容器唯一标识 打包后的镜像名:版本号<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将镜像备份出来</span><br>docker save 镜像名称:Tag -o 文件名<br>docker save tomcat:1.0 -o tomcat-1.0.tar<br></code></pre></td></tr></table></figure><h1 id="3-docker镜像分层原理"><a href="#3-docker镜像分层原理" class="headerlink" title="3. docker镜像分层原理"></a>3. docker镜像分层原理</h1><blockquote><p>3.1 镜像定义</p></blockquote><p>定义:一个镜像代表一个软件 软件包 用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码、运行时所需的库、环境变量、配置文件</p><blockquote><p>3.2问题思考</p></blockquote><p>1.镜像为什么这么大？</p><p><strong>原因</strong>：一个软件镜像不仅仅是原来软件包,还包含软件所需的操作系统依赖 软件自身依赖 以及自身软件包组成</p><p>2.为什么docker镜像采用分层镜像原理</p><p>docker在设计镜像时每一个镜像都是由n个镜像组成 —&gt;镜像像一个花卷一层一层。</p><p>3.为什么采用联合文件系统</p><p>好处:最大的一个好处时资源共享 采用分层机制实现基础层共享 从而减少docker仓库的大小</p><h1 id="4-docker容器间的网络配置"><a href="#4-docker容器间的网络配置" class="headerlink" title="4. docker容器间的网络配置"></a>4. docker容器间的网络配置</h1><blockquote><p>4.1为什么需要网络功能</p></blockquote><p>Docker允许通过外部访问容器或容器互联的方式来提供网络服务</p><p>1.docker容器与操作系统的通信机制</p><p><img src="/2022/04/23/docker/image-20220424105048273.png" alt="image-20220424105048273"></p><p>2.docker网络使用</p><p>注意: 一般在使用docker网桥(bridge)实现容器与容器通信时,都是站在一个应用角度进行容器通信</p><p>3.查看docker默认网桥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker默认网桥</span><br>docker network ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建自己的网桥</span><br>docker create &lt;网桥名称&gt; -d bridge(默认桥接方式)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器时指定网桥</span><br>docker run -d -p 8080:8080 --network ems --name....<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置了network后可以通过名字访问,不在使用ip了</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用docker run --network时网桥必须存在</span><br></code></pre></td></tr></table></figure><h1 id="5-docker数据卷"><a href="#5-docker数据卷" class="headerlink" title="5. docker数据卷"></a>5. docker数据卷</h1><blockquote><p>5.1数据卷作用</p></blockquote><p>用来实现容器与宿主机之间的数据共享</p><blockquote><p>5.2数据卷特点</p></blockquote><ul><li>数据卷: 可以在容器之间共享和重用</li><li>对数据卷的修改会立即影响到对应的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-v后面的:ro 代表<span class="hljs-built_in">read</span> only 只读</span><br>docker run -d -p 8085:8080 --name tomcat5 -v /home/apps:/usrl/local/tomcat:ro tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><ul><li>对数据卷的更新修改,不会影响镜像</li><li>数据卷默认一直存在,即使容器删除</li></ul><blockquote><p>5.3数据卷操作</p></blockquote><p>1.自定义数据卷目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v 绝对路径:容器内路径<br></code></pre></td></tr></table></figure><p>2.自动创建数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v 卷名:(容器内路径)<br></code></pre></td></tr></table></figure><p>3.docker操作数据卷指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看数据卷</span><br>docker volume ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看某个数据卷细节</span><br>docker volume inspect aa<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据卷</span><br>docker volume create bb<br></code></pre></td></tr></table></figure><h1 id="6-docker核心架构图"><a href="#6-docker核心架构图" class="headerlink" title="6. docker核心架构图"></a>6. docker核心架构图</h1><p><img src="/2022/04/23/docker/image-20220424150615720.png" alt="image-20220424150615720"></p><h1 id="7-docker安装服务"><a href="#7-docker安装服务" class="headerlink" title="7.docker安装服务"></a>7.docker安装服务</h1><h2 id="7-1-docker安装mysql"><a href="#7-1-docker安装mysql" class="headerlink" title="7.1 docker安装mysql"></a>7.1 docker安装mysql</h2><ol><li><p>在docker hub搜索对应服务的镜像</p></li><li><p>查看服务的描述和版本号</p></li><li><p>确定使用的版本进行pull</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.6<br></code></pre></td></tr></table></figure><ol start="4"><li><p>使用镜像</p><p>4.1 基本启动mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基本命令 -e 代表的environmenth</span><br>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">example</span><br>docker run --name mysql-5.6 -r MYSQL_ROOT_PASSWORD=root -d mysql:5.6<br></code></pre></td></tr></table></figure><p>4.2 端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8087:3306 --name mysql1 -e MYSQL_ROOT_PASSWORD=root -v mysqldata:/var/lib/mysql mysql:5.6<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="7-2-docker安装tomcat"><a href="#7-2-docker安装tomcat" class="headerlink" title="7.2 docker安装tomcat"></a>7.2 docker安装tomcat</h2><blockquote><p>1.下载tomcat服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><blockquote><p>2.启动tomcat服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">2.1 启动tomcat服务</span><br>docker run -d -p 8081:8080 --name tomcat tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.2 将部署应用目录通过数据卷挂载宿主机系统</span><br>docker run -d -p 8081:8080 --name tomcat -v apps:/url/local/tomcat/webapps tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.3 修改配置文件,并将配置文件挂载到宿主机系统</span><br>docker run -d -p 8081:8080 --name tomcat -v apps:/url/local/tomcat/webapps -v confs:/usr/local/tomcat/c tomcat:8.0-jre8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Marked</title>
    <link href="/2022/03/28/Marked/"/>
    <url>/2022/03/28/Marked/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Vue页面中解析Md文件</p></blockquote><p>1.安装marked插件</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> marked -S<br></code></pre></td></tr></table></figure><p>2.组件中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;w&quot;&gt;<br>    &lt;div v-html=&quot;articalContent&quot; class=&quot;markdown-body&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>const marked = require(&#x27;marked&#x27;)<br>import HelloWrold from &#x27;../note/HelloWorld.md&#x27;<br>import Shell from &#x27;../note/Shell.md&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      articalContent: &#x27;&#x27;<br>    &#125;<br>  &#125;,<br>  created() &#123;<br>    <br>    this.articalContent = marked(Shell)<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>  .w &#123;<br>    width: 1226px;<br>    margin: 0 auto;<br>  &#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>3.如果想引入外部md文件则</p><blockquote><p>3.1 安装插件</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> html-loader markdown-loader -S<br></code></pre></td></tr></table></figure><blockquote><p>3.2 配置 vue.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;md&#x27;</span>)<br>      .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.md/</span>)<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;html-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;html-loader&#x27;</span>)<br>      .<span class="hljs-title function_">end</span>()<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;markdown-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;markdown-loader&#x27;</span>)<br>      .<span class="hljs-title function_">end</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.调整样式</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> github-markdown-css<br></code></pre></td></tr></table></figure><blockquote><p>全局引入</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;github-markdown-css&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建个人博客</title>
    <link href="/2022/03/25/Hexo-Generate/"/>
    <url>/2022/03/25/Hexo-Generate/</url>
    
    <content type="html"><![CDATA[<p>这是一篇搭建Hexo个人博客的文章,主要介绍了关于通过Hexo搭建个人博客的过程常用命令,以及遇到的一些坑。</p><h1 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h1><blockquote><p>1.1初始化博客项目</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs swift">hexo <span class="hljs-keyword">init</span> &lt;folder&gt;<br></code></pre></td></tr></table></figure><blockquote><p>1.2清除缓存</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><blockquote><p>1.3 编译</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo generation</span><br></code></pre></td></tr></table></figure><blockquote><p>1.4 本地运行</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span> <br></code></pre></td></tr></table></figure><h1 id="2-个人搭建遇到的问题"><a href="#2-个人搭建遇到的问题" class="headerlink" title="2.个人搭建遇到的问题"></a>2.个人搭建遇到的问题</h1><blockquote><p>2.1图片解析问题</p></blockquote><ol><li><p>下载插件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-img<br></code></pre></td></tr></table></figure></li><li><p>修改_config.yml配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">post_asset_foler</span>  = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用相对路径引入文件</li></ol></li></ol><p>**注意:对于Windows用户一定一定要在引用图片时加.&#x2F;否则会报错,同时插件也必须是上面的插件,对于旧版产检i一样不好用</p><p><img src="/2022/03/25/Hexo-Generate/1.png" alt="测试图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>configure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/25/hello-world/"/>
    <url>/2022/03/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
