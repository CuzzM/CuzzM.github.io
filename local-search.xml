<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2022/08/14/JDBC/"/>
    <url>/2022/08/14/JDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JDBC概述"><a href="#1-JDBC概述" class="headerlink" title="1. JDBC概述"></a>1. JDBC概述</h1><p>​        Java数据库连接，（Java Database Connectivity，简称JDBC）是<a href="https://baike.baidu.com/item/Java%E8%AF%AD%E8%A8%80">Java语言</a>中用来规范客户端程序如何来访问数据库的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844">应用程序接口</a>，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。我们通常说的JDBC是面向关系型数据库的。</p><p><img src="/2022/08/14/JDBC/image-20220814210006772.png" alt="image-20220814210006772"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2022/08/12/Servlet/"/>
    <url>/2022/08/12/Servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Servlet规范介绍"><a href="#1-Servlet规范介绍" class="headerlink" title="1. Servlet规范介绍"></a>1. Servlet规范介绍</h1><ol><li><p>Servlet规范来自于JAVAEE规范中的一种</p></li><li><p>作用:</p><ol><li>在Servlet规范中,指定【动态资源文件】开发步骤            ——————&gt;开发者</li><li>在Servlet规范中,指定Http服务器调用动态资源文件规则 ——————&gt;Web服务器</li><li>在Servlet规范中,指定Http服务器管理动态资源文件实例对象规则 ————&gt;Web服务器</li></ol></li></ol><h1 id="2-Servlet接口和实现类"><a href="#2-Servlet接口和实现类" class="headerlink" title="2. Servlet接口和实现类"></a>2. Servlet接口和实现类</h1><ol><li>要想定义一个类为Servlet,则这个类必须实现Servlet接口</li><li>这个类是servlet-api.jar包下面的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig var1)</span> <span class="hljs-keyword">throws</span> ServletException;<br><br>    ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest var1, ServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException;<br><br>    String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>实际开发中我们一般基础HttpServlet这个类，然后重写里面的doGet和doPost方法,服务器会生成我们的Servlet实例,调用里面的service()方法，然后根据方法类型,执行对应的doGet和doPost方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>    <span class="hljs-type">long</span> lastModified;<br>    <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;GET&quot;</span>)) &#123;<br>        lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>        <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1L</span>) &#123;<br>            <span class="hljs-built_in">this</span>.doGet(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">ifModifiedSince</span> <span class="hljs-operator">=</span> req.getDateHeader(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>);<br>            <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;<br>                <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>                <span class="hljs-built_in">this</span>.doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                resp.setStatus(<span class="hljs-number">304</span>);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;HEAD&quot;</span>)) &#123;<br>        lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>        <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>        <span class="hljs-built_in">this</span>.doHead(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doPost(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;PUT&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doPut(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;DELETE&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doDelete(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doOptions(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;TRACE&quot;</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.doTrace(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>        Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;method&#125;;<br>        errMsg = MessageFormat.format(errMsg, errArgs);<br>        resp.sendError(<span class="hljs-number">501</span>, errMsg);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-Servlet开发步骤"><a href="#3-Servlet开发步骤" class="headerlink" title="3.Servlet开发步骤"></a>3.Servlet开发步骤</h1><ol><li>继承HttpServlet类,重写我们需要的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/12 15:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;doGet....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;doPost...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>注册我们的servlet给Tomcat识别</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">web-app</span> <span class="hljs-keyword">PUBLIC</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="hljs-meta"> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><br><br>  <span class="hljs-comment">&lt;!--将Servlet类路径交给Tomcat服务器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.zjw.controller.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 默认值为0,填写一个大于0的整数表示启动的时候创建Servlet实例对象 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在Http服务器运行期间,只能创建一个Servlet实例对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--映射请求路径--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/myServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>启动Tomcat服务器,发起请求即可</li></ol><h1 id="4-Servlet生命周期"><a href="#4-Servlet生命周期" class="headerlink" title="4. Servlet生命周期"></a>4. Servlet生命周期</h1><p>Servlet的生命周期就是Servlet实例对象从创建到销毁的过程</p><ol><li><p>如果是默认情况下,那么就会在请求访问到相应的Servlet时,Tomcat给我们自动创建Servlet实例(只会创建一个实例)</p></li><li><p>在执行玩构造方法后,会<strong>执行Servlet实例的初始化init</strong>方法</p></li><li><p>执行玩初始化方法后,<strong>执行service方法</strong></p></li><li><p>Servlet<strong>销毁前调用destory方法</strong></p></li><li><p>最后Servlet被JVM垃圾回收期回收</p></li></ol><h1 id="5-HttpServletResponse"><a href="#5-HttpServletResponse" class="headerlink" title="5. HttpServletResponse"></a>5. HttpServletResponse</h1><p><strong>介绍</strong></p><ol><li><p>HttpServletResponse接口来自于Servlet规范中，在Tomcat中javax.servlet-api.jar包中</p></li><li><p>HttpServletResponse接口<strong>实现类由Http服务器</strong>负责提供</p></li><li><p>HttpServletResponse接口负责将doGet&#x2F;doPost方法执行结果写入到响应体交给浏览器</p></li><li><p>开发人员习惯将HttpServletResponse接口修饰的对象成为【响应体对象】1</p></li></ol><p><strong>主要功能</strong></p><ol><li>将执行结果以二进制形式写入到响应体</li><li>可以设置响应头的content-type属性值,从而控制浏览器使用对应的编译器将响应体二进制数据编译为【文字,图片，视频，命令】</li><li>可以设置响应头中的【location】属性,将一个请求地址赋值给location.从而控制浏览器想指定服务器发送请求</li></ol><p><strong>Demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/12 21:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">//1. 假设str是我们的响应结果</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;h2&gt;泰拳&lt;/h2&gt;&lt;h2&gt;咏春&lt;h2/&gt;&quot;</span>;<br><br>        <span class="hljs-comment">// 设置编译规则,可以识别html标签,同时不产生中文乱码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-comment">//2. 我们需要将响应结果写入到响应体中,因此肯定需要通过response获取输出流</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        <br>        <span class="hljs-comment">//3. 通过输出流,将执行结果以二进制形式写入</span><br>        <span class="hljs-comment">// out可以输出&#123;字符串,字符,ASCII码&#125;,所以写入50实例是ASCII码,所以尽量不用write()方法</span><br>        <span class="hljs-comment">// out.write(result);</span><br>        out.print(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用out.print()</li><li>默认响应编码为ISO-XXX,防止中文编码尽量用utf-8和IDEA一致</li><li>要使能识别html代码，则使用特定的文本编辑器,设置<strong>响应的contentType</strong></li><li>可以使用resp.sendRedirect()进行重定向</li></ol><h1 id="6-HttpServletRequest"><a href="#6-HttpServletRequest" class="headerlink" title="6. HttpServletRequest"></a>6. HttpServletRequest</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.controller;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/13 9:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> req.getRequestURI();<br>        System.out.println(<span class="hljs-string">&quot;url:&quot;</span> + url);<br>        System.out.println(<span class="hljs-string">&quot;uri:&quot;</span> + uri);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通过一个枚举对象获得所有请求参数名称</span><br><span class="hljs-comment">         */</span><br>        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();<br>        <span class="hljs-keyword">while</span>(parameterNames.hasMoreElements())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">paramKey</span> <span class="hljs-operator">=</span> parameterNames.nextElement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> req.getParameter(paramKey);<br>            System.out.println(paramKey + <span class="hljs-string">&quot;=&quot;</span> + paramValue);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/htm;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(username);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        out.print(username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-请求和响应对象生命周期"><a href="#7-请求和响应对象生命周期" class="headerlink" title="7. 请求和响应对象生命周期"></a>7. 请求和响应对象生命周期</h1><ol><li><p>在http服务器接收到浏览器发送的【http请求协议包】之后,自动为当前的【http请求协议包】生成有一个【请求对象】和【响应对象】</p></li><li><p>在http服务器调用doGet&#x2F;doPost方法时,负责将【请求对象】和【响应】对象作为实参传递到方法，确保doGet&#x2F;doPost正确执行</p></li><li><p>当doGet&#x2F;doPost方法运行完毕时,意味着本次请求处理完毕,返回【Http响应协议包】，在返回【Http响应协议包】推送浏览器之前,会销毁当前请求的【请求对象】和【响应对象】销毁</p></li></ol><p><strong>【请求对象】和【响应对象】贯彻一次请求的始终</strong></p><p><img src="/2022/08/12/Servlet/image-20220813112426531.png" alt="image-20220813112426531"></p><h1 id="8-请求重定向和转发"><a href="#8-请求重定向和转发" class="headerlink" title="8. 请求重定向和转发"></a>8. 请求重定向和转发</h1><ol><li><strong>重定向原理</strong></li></ol><ul><li>用户第一次通过【手动方式】通知浏览器访问oneServlet。oneServlet工作完毕后,将TwoServlet地址写入到响应头location属性中，导致Tomcat将302状态码写入状态行。</li></ul><p>​        在浏览器接受到相应包之后,会读取到302状态。此时浏览器自动根据响应头中的location属性访问第二个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.sendRedirect(<span class="hljs-string">&quot;请求地址&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>重定向特性</strong></li></ol><ul><li><p>请求地址</p><p>既可以把当前网站内部的资源文件地址发送给浏览器，也可以访问其它网站。</p></li><li><p>请求次数</p><p>浏览器至少发送两次请求，但只有第一次请求是【手动发送】,其余均是自动发送</p></li><li><p>请求方式</p><p>重定向解决发方案中,通讯地址栏通知浏览器发起下一次请求，因此通过重定向解决方案调用的资源文件一定是get方式</p></li></ul><ol start="3"><li>重定向缺点</li></ol><ul><li>请求来回返回,浪费时间。</li></ul><p><img src="/2022/08/12/Servlet/image-20220821191720039.png" alt="image-20220821191720039"></p><p>请求转发的原理：就是Tomcat在接受请求之后,代替浏览器完成请求实现命令如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 通过当前请求对象生成资源文件申请报告对象</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">report</span> <span class="hljs-operator">=</span> request.getRequsetDispatcher(“/资源文件名”);<br><br><span class="hljs-comment">//2. 将报告对象发送给Tomcat</span><br>report.forward(requset,report)<br></code></pre></td></tr></table></figure><p><strong>请求转发的优点:</strong></p><ol><li>用户只需要发送一次请求</li><li>较少请求往返次数,减少延迟</li></ol><p><strong>特征</strong></p><ol><li>在请求转发过程中,浏览器只发送一次请求</li><li>只能向Tomcat服务器中申请调用当前网站下资源文件地址,不能写网站名</li><li><strong>内部转发的方式是根据客户端第一次请求的method保持一致</strong>。</li></ol><h1 id="9-Servlet之间的数据共享"><a href="#9-Servlet之间的数据共享" class="headerlink" title="9. Servlet之间的数据共享"></a>9. Servlet之间的数据共享</h1><ol><li>数据共享： OneServlet工作完毕后,将产生的数据交给TwoServlet</li><li>Servlet规范中提供四种数据共享方案<ol><li>ServletContext接口</li><li>Cookie类</li><li>HttpSession接口</li><li>HttpServletRequest接口</li></ol></li></ol><blockquote><p>ServletContext接口</p></blockquote><ol><li>来自于Servlet规范中的一个接口,在Tomcat中存在servlet-api.jar在Tomcat中负责提供这个接口实现类</li><li>如果两个Servlet来自于同一个网站。彼此之间通过网站的ServletContext实例对象实现共享数据</li><li>ServletContext是【全局共享对象】</li></ol><p><img src="/2022/08/12/Servlet/image-20220821222017697.png" alt="image-20220821222017697"></p><p>全局作用域对象声明周期:</p><ol><li>在Http服务器启动的时候,就会在内存中为当前应用创建一个全局作用域对象</li><li>在Http服务器运行期间时,一个应用只有一个全局作用域对象</li><li>在Http服务器运行期间,全局作用域对象一直存活</li><li>在Http服务器准备关闭时,负责将当前应用中全局作用域对象进行销毁处理</li></ol><p><strong>全局作用域对象贯彻整个应用的运行期间</strong></p><ol start="5"><li>通过请求对象向Tomcat索要当前网站中【全局作用域对象】</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> request.getServletContext();<br></code></pre></td></tr></table></figure><blockquote><p>Cookie</p></blockquote><ol><li>Cookie来自于Servlet规范中的一个工具类,存在于Tomcat提供servlet-api.jar中</li><li>如果两个Servlet来自于同一网站,并且为同一浏览器&#x2F;用户提供服务,此时借助于cookie对象进行数据共享</li><li>Cookie存放当前用户的私人数据,在共享数据过程中提高服务质量</li><li>在现实生活场景中,Cookie相当于【会员卡】</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/"/>
    <url>/2022/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-迭代器模式"><a href="#1-迭代器模式" class="headerlink" title="1. 迭代器模式"></a>1. 迭代器模式</h1><blockquote><p>1.1 需求</p></blockquote><p>学校有多个学院、学院有多个系。每个学校存储系的信息方式可能不同，需要使用一种统一的方法来对学院和系信息进行遍历。迭代器模式是一种行为型模式。</p><blockquote><p>1.2 URL类图</p></blockquote><p><img src="/2022/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/image-20220810204718838.png" alt="image-20220810204718838"></p><p>对原理类图进行解释：</p><ol><li>Iterator： 迭代器接口,系统提供,包含两个主要方法hasNext()和next()</li><li>ConcreteIterator: 具体的迭代器类,实现迭代器接口,如上图的ComputerDepartmentIterator</li><li>Aggregate： 一个统一的聚合接口，主要方法是Iterator() 返回一个迭代器</li><li>ConcreteAggregate: Aggregate接口的实现类,持有具体的迭代器类</li></ol><blockquote><p>1.3 具体代码</p></blockquote><p><strong>College接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 学院接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">College</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得该学院信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加系</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> department</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(Department department)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得迭代器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Department&gt; <span class="hljs-title function_">getIterator</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Department类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Department</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Department&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>迭代器接口的两个实现类:分别实现数组和ArrayList的迭代</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算机学院迭代器接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;Department&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> Department[] departments;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始遍历指针</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollegeIterator</span><span class="hljs-params">(Department[] departments)</span> &#123;<br>        <span class="hljs-built_in">this</span>.departments = departments;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Department[] getDepartments() &#123;<br>        <span class="hljs-keyword">return</span> departments;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDepartments</span><span class="hljs-params">(Department[] departments)</span> &#123;<br>        <span class="hljs-built_in">this</span>.departments = departments;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span>(position &gt;= departments.length || departments[position] == <span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Department <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments[position];<br>        <span class="hljs-keyword">if</span>(department == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Illegal Iterator,Please use next() after the hasNext() return true!&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>           position = position + <span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">return</span> department;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 机械学院迭代器接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MachineCollegeIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;Department&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Department&gt; departments;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MachineCollegeIterator</span><span class="hljs-params">(List&lt;Department&gt; departments)</span> &#123;<br>        <span class="hljs-built_in">this</span>.departments = departments;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Department&gt; <span class="hljs-title function_">getDepartments</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> departments;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDepartments</span><span class="hljs-params">(List&lt;Department&gt; departments)</span> &#123;<br>        <span class="hljs-built_in">this</span>.departments = departments;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span>(index &gt;= departments.size())&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Department <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments.get(index);<br>        index = index + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> department;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>College的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputerCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span>&#123;<br><br>    Department[] departments;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numOfDepartment</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ComputerCollege</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>[<span class="hljs-number">5</span>];<br>        addDepartment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;软件工程&quot;</span>));<br>        addDepartment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;计算机科学&quot;</span>));<br>        addDepartment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;网络工程&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;计算机学院&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(Department department)</span> &#123;<br>        departments[numOfDepartment] = department;<br>        numOfDepartment = numOfDepartment + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Department&gt; <span class="hljs-title function_">getIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollegeIterator</span>(departments);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MachineCollege</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">College</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Department&gt; departmentList;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;机械学院&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MachineCollege</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.departmentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">5</span>);<br>        addDepartment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;自动驾驶&quot;</span>));<br>        addDepartment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;材料制作&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">(Department department)</span> &#123;<br>        departmentList.add(department);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;Department&gt; <span class="hljs-title function_">getIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MachineCollegeIterator</span>(departmentList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>统一输出类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 统一输出学院和院系信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnifyOutput</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;College&gt; collegeList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnifyOutput</span><span class="hljs-params">(List&lt;College&gt; collegeList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.collegeList = collegeList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出全部信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollegeDepartment</span><span class="hljs-params">()</span>&#123;<br>        Iterator&lt;College&gt; iterator = collegeList.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            <span class="hljs-type">College</span> <span class="hljs-variable">college</span> <span class="hljs-operator">=</span> iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;======&quot;</span>+college.getInfo()+<span class="hljs-string">&quot;=====&quot;</span>);<br>            Iterator&lt;Department&gt; iterator1 = college.getIterator();<br>            <span class="hljs-keyword">while</span>(iterator1.hasNext())&#123;<br>                <span class="hljs-type">Department</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator1.next();<br>                System.out.println(next);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>测试类和测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zjw.iterator_pattern;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;College&gt; collegeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ComputerCollege</span> <span class="hljs-variable">computerCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputerCollege</span>();<br>        <span class="hljs-type">MachineCollege</span> <span class="hljs-variable">machineCollege</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MachineCollege</span>();<br>        machineCollege.addDepartment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(<span class="hljs-string">&quot;高级机械&quot;</span>));<br>        collegeList.add(computerCollege);<br>        collegeList.add(machineCollege);<br>        <span class="hljs-type">UnifyOutput</span> <span class="hljs-variable">unifyOutput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnifyOutput</span>(collegeList);<br>        unifyOutput.printCollegeDepartment();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/08/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/image-20220810205916492.png" alt="image-20220810205916492"></p>]]></content>
    
    
    
    <tags>
      
      <tag>编程思想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2022/08/04/Redis/"/>
    <url>/2022/08/04/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="1-NoSQL数据库"><a href="#1-NoSQL数据库" class="headerlink" title="1. NoSQL数据库"></a>1. NoSQL数据库</h1><h2 id="1-1-分类"><a href="#1-1-分类" class="headerlink" title="1.1 分类"></a>1.1 分类</h2><ul><li>Key—Value存储数据库  Redis</li><li>列存储数据库   HBase</li><li>文档型数据库   MongoDB</li><li>图形数据库       Neo4j</li></ul><h1 id="2-Redis6安装和概述"><a href="#2-Redis6安装和概述" class="headerlink" title="2. Redis6安装和概述"></a>2. Redis6安装和概述</h1><h2 id="2-1-Reids的安装"><a href="#2-1-Reids的安装" class="headerlink" title="2.1 Reids的安装"></a>2.1 Reids的安装</h2><p>参考文章:<a href="https://blog.csdn.net/weixin_45067120/article/details/106784666">(9条消息) Linux–Redis6.0 安装与使用简介_爱机车的程序猿的博客-CSDN博客_redis6.0安装</a></p><blockquote><p>1.官网下载安全包</p></blockquote><p>下载安装包后,将安装包放在Linux的&#x2F;usr&#x2F;local&#x2F;redis目录下,解压安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">tar -zxvf 安装包名称 安装路径 <br></code></pre></td></tr></table></figure><blockquote><p>2.安装gcc环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc<br></code></pre></td></tr></table></figure><p>查看gcc版本，centos7默认安装的版本过低,因此需要升级</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gcc -v</span><br></code></pre></td></tr></table></figure><p><strong>升级GCC依次执行以下命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install centos-release-scl<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scl enable devtoolset-9 bash<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo “source /opt/rh/devtoolset-9/enable” &gt;&gt;/etc/profile　　--使永久生效<br></code></pre></td></tr></table></figure><p>通过以下命令查看是否安装成功gcc和make</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">whereis gcc make<br></code></pre></td></tr></table></figure><blockquote><p>3.编译、测试、安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">编译</span><br>make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试</span><br>make test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装---&gt;安装路径为/usr/local/bin</span><br>make install<br></code></pre></td></tr></table></figure><h2 id="2-2-Redis概述"><a href="#2-2-Redis概述" class="headerlink" title="2.2 Redis概述"></a>2.2 Redis概述</h2><blockquote><p>1.查看默认安装目录</p></blockquote><ul><li><p>redis-benchmark： 性能测试工具</p></li><li><p>redis-check-aof： 修复有问题的aof文件</p></li><li><p>redis-check-dump: 修复有问题的dump.rdb文件</p></li><li><p>redis-sentinel： Redis集群使用</p></li><li><p>redis-server： Redis服务器启动命令</p></li><li><p>redis-cli： Redis客户端</p></li></ul><blockquote><p>2.Redis前台启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server<br></code></pre></td></tr></table></figure><blockquote><p>3.Redis后台启动</p></blockquote><ol><li>找到redis.conf，最后复制一份redis.conf进行修改</li><li>设置redis.conf <strong>daemonize no</strong> 改为 <strong>yes</strong>(守护进程)</li></ol><h1 id="3-常用五大数据类型"><a href="#3-常用五大数据类型" class="headerlink" title="3.常用五大数据类型"></a>3.常用五大数据类型</h1><h1 id="4-Redis6配置文件详解"><a href="#4-Redis6配置文件详解" class="headerlink" title="4.Redis6配置文件详解"></a>4.Redis6配置文件详解</h1><h1 id="5-Redis6的发布订阅"><a href="#5-Redis6的发布订阅" class="headerlink" title="5.Redis6的发布订阅"></a>5.Redis6的发布订阅</h1><h1 id="6-Redis新数据类型"><a href="#6-Redis新数据类型" class="headerlink" title="6.Redis新数据类型"></a>6.Redis新数据类型</h1><h1 id="7-Jedis操作Redis6"><a href="#7-Jedis操作Redis6" class="headerlink" title="7.Jedis操作Redis6"></a>7.Jedis操作Redis6</h1><h1 id="8-Redis整合Spring-Boot"><a href="#8-Redis整合Spring-Boot" class="headerlink" title="8.Redis整合Spring Boot"></a>8.Redis整合Spring Boot</h1><h1 id="9-Redis6的事务操作"><a href="#9-Redis6的事务操作" class="headerlink" title="9.Redis6的事务操作"></a>9.Redis6的事务操作</h1><h1 id="10-Redis6持久化之RDB"><a href="#10-Redis6持久化之RDB" class="headerlink" title="10.Redis6持久化之RDB"></a>10.Redis6持久化之RDB</h1><h1 id="11-Redis6持久化之AOF"><a href="#11-Redis6持久化之AOF" class="headerlink" title="11.Redis6持久化之AOF"></a>11.Redis6持久化之AOF</h1><h1 id="12-Redis6的主从复制"><a href="#12-Redis6的主从复制" class="headerlink" title="12.Redis6的主从复制"></a>12.Redis6的主从复制</h1><h1 id="13-Redis6集群"><a href="#13-Redis6集群" class="headerlink" title="13.Redis6集群"></a>13.Redis6集群</h1><h1 id="14-Redis6应用解决问题"><a href="#14-Redis6应用解决问题" class="headerlink" title="14.Redis6应用解决问题"></a>14.Redis6应用解决问题</h1><h1 id="15-Redis6新功能"><a href="#15-Redis6新功能" class="headerlink" title="15. Redis6新功能"></a>15. Redis6新功能</h1>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaIO</title>
    <link href="/2022/08/01/JavaIO/"/>
    <url>/2022/08/01/JavaIO/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文件"><a href="#1-文件" class="headerlink" title="1. 文件"></a>1. 文件</h1><h2 id="1-1-文件基本概念"><a href="#1-1-文件基本概念" class="headerlink" title="1.1 文件基本概念"></a>1.1 文件基本概念</h2><ul><li><strong>什么是文件？</strong></li></ul><p>文件———&gt;存放数据</p><ul><li><strong>文件流</strong></li></ul><p>文件在程序中是以流的形式来操作的</p><p>Java程序(内存中) ————&gt;文件(磁盘)  输出流</p><p>Java程序(内存中) &lt;————文件(磁盘)  输入流</p><h2 id="1-2-文件基本操作"><a href="#1-2-文件基本操作" class="headerlink" title="1.2 文件基本操作"></a>1.2 文件基本操作</h2><blockquote><ol><li>创建文件</li></ol></blockquote><ul><li>创建文件对象相关构造器和方法</li></ul><p>相关构造器:</p><p>File(String pathname) &#x2F;&#x2F;根据路径在内存中创建File对象</p><p>File(File parent,String child) &#x2F;&#x2F;父目录文件+子路径</p><p>File(String parent,String child) &#x2F;&#x2F;根据父目录+自路径</p><ul><li>在磁盘中创建文件的方法</li></ul><p>createNewFile</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateFileTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_PATH1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaWorkSpace\\javase\\java-io\\hello1.txt&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PARENT_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaWorkSpace\\javase\\java-io&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHILD_PATH2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello2.txt&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHILD_PATH3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello3.txt&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        createFileMethod1(FILE_PATH1);<br>        createFileMethod2(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(PARENT_FILE_PATH),CHILD_PATH2);<br>        createFileMethod3(PARENT_FILE_PATH,CHILD_PATH3);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath 文件路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFileMethod1</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        file.createNewFile();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parentFile 父目录文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> childPath  子路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFileMethod2</span><span class="hljs-params">(File parentFile,String childPath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile, childPath);<br>        file.createNewFile();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parentFilePath 父目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> childPath  子路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFileMethod3</span><span class="hljs-params">(String parentFilePath,String childPath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFilePath, childPath);<br>        file.createNewFile();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>获取文件信息</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInfoTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaWorkSpace\\javase\\java-io\\hello1.txt&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FILE_PATH);<br>        System.out.println(<span class="hljs-string">&quot;文件名称:&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;文件绝对路径:&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.getAbsolutePath() + <span class="hljs-string">&quot;]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;文件父目录:&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.getParent() + <span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-comment">//具体字节大小需要看编码</span><br>        System.out.println(<span class="hljs-string">&quot;文件大小(字节):&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.length() + <span class="hljs-string">&quot;]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;文件是否存在:&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.exists() + <span class="hljs-string">&quot;]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否是一个文件:&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.isFile() + <span class="hljs-string">&quot;]&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否是一个目录:&quot;</span> + <span class="hljs-string">&quot;  &quot;</span> + <span class="hljs-string">&quot;[&quot;</span> + file.isDirectory() + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>目录操作</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DirectoryTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaWorkSpace\\javase\\java-io\\hello1.txt&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DIRECTORY_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaWorkSpace\\javase\\java-io\\demo&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//deleteFile(FILE_PATH);</span><br>        deleteDirectory(DIRECTORY_PATH);<br>        <span class="hljs-comment">//createDirectory(DIRECTORY_PATH);</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据文件路径删除文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteFile</span><span class="hljs-params">(String filePath)</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            <span class="hljs-keyword">if</span>(file.delete())&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;该文件不存在&quot;</span>);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> directoryPath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDirectory</span><span class="hljs-params">(String directoryPath)</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            <span class="hljs-keyword">if</span>(file.delete())&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;该目录不存在&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果目录存在则提示存在，不存在则创建目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> directoryPath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createDirectory</span><span class="hljs-params">(String directoryPath)</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span>(file.isDirectory())&#123;<br>            System.out.println(<span class="hljs-string">&quot;该目录已经存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">if</span>(file.mkdirs())&#123;<br>               System.out.println(<span class="hljs-string">&quot;该目录创建成功&quot;</span>);<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               System.out.println(<span class="hljs-string">&quot;该目录创建失败&quot;</span>);<br>           &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-IO流"><a href="#2-IO流" class="headerlink" title="2. IO流"></a>2. IO流</h1><h2 id="2-1-IO流原理及分类"><a href="#2-1-IO流原理及分类" class="headerlink" title="2.1 IO流原理及分类"></a>2.1 IO流原理及分类</h2><ul><li>流的分类</li></ul><p>按操作数据的单位不同分为： 字节流、字符流</p><p>按流的流向不同分为: 输入流、输出流</p><p>按流的角色不同分为: 节点流、处理流(包装流)</p><table><thead><tr><th align="center">抽象基类</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">InputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><h2 id="2-2-FileInputStream"><a href="#2-2-FileInputStream" class="headerlink" title="2.2 FileInputStream"></a>2.2 FileInputStream</h2><p><img src="/2022/08/01/JavaIO/image-20220807115207477.png" alt="image-20220807115207477"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示字节输入流</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PARENT_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaWorkSpace\\javase\\java-io\\hello2.txt&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile(PARENT_FILE_PATH);<br>        readFile2(PARENT_FILE_PATH,<span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 单个字节读取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(String filePath)</span>&#123;<br>        <span class="hljs-comment">// 读标志返回值</span><br>        <span class="hljs-type">int</span> readData;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建inputStream对象用于读取文件，读取也需要看编码</span><br>            <span class="hljs-comment">// UTF-8变成编码 中文占3个字节，英文占一个字节</span><br>            inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-keyword">while</span>((readData = inputStream.read())!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)readData);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一次读取k个字节到buf中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile2</span><span class="hljs-params">(String filePath,<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[k];<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">// 如果读取正常,返回的是实际读取到的字节数</span><br>            <span class="hljs-keyword">while</span>((readLength = inputStream.read(buf))!=-<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; readLength; i++) &#123;<br>                    System.out.print((<span class="hljs-type">char</span>)buf[i]);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-FileOutputStream"><a href="#2-3-FileOutputStream" class="headerlink" title="2.3 FileOutputStream"></a>2.3 FileOutputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/7 12:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStream01</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_OUTPUT_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaBase\\IO\\hello.txt&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        writeFile(FILE_OUTPUT_PATH, <span class="hljs-string">&quot;hello,world!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeFile</span><span class="hljs-params">(String filePath,String content)</span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * FileOutputStream的初始化方式</span><br><span class="hljs-comment">         * 1. 如果只有filePath,那么就是覆盖写</span><br><span class="hljs-comment">         * 2. 如果有filePath,且append == true,那么就是追加写</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            outputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath);<br>            outputStream.write(content.getBytes());<br>        &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                outputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文件拷贝</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> file;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 文件拷贝</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/7 12:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始文件绝对路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ORIGINAL_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\13153\\Desktop\\1.png&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 复制后的文件路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FINALLY_FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaBase\\IO\\src\\1.png&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 创建文件写入和写出流,文件可能很大,因此我们采取的策略是读一部分,写一部分</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">int</span> readLength;<br>        <span class="hljs-comment">//一次性读取1kb</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(ORIGINAL_FILE_PATH);<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(FINALLY_FILE_PATH,<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">//其中读取到的内容在buf中,readLength为读取字节长度</span><br>            <span class="hljs-keyword">while</span>((readLength = fileInputStream.read(buf))!=-<span class="hljs-number">1</span>)&#123;<br>                count++;<br>                System.out.println(<span class="hljs-string">&quot;第&quot;</span>+count+<span class="hljs-string">&quot;次读取了&quot;</span>+readLength+<span class="hljs-string">&quot;个字节到内存中&quot;</span>);<br>                fileOutputStream.write(buf, <span class="hljs-number">0</span>, readLength);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;文件拷贝完毕&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileInputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-FileReader"><a href="#2-4-FileReader" class="headerlink" title="2.4 FileReader"></a>2.4 FileReader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo2;<br><br><br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> zjw</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/8/7 16:05</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader01</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILE_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\JavaBase\\IO\\hello.txt&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        readFile(FILE_PATH);<br>        readFile2(FILE_PATH, <span class="hljs-number">5</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(String filePath)</span>&#123;<br>        <span class="hljs-comment">//1.定义FileReader</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> data;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(FILE_PATH);<br>            <span class="hljs-keyword">while</span>((data = fileReader.read())!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)data);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fileReader!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile2</span><span class="hljs-params">(String filePath,<span class="hljs-type">int</span> k)</span>&#123;<br>        <span class="hljs-comment">//1.定义FileReader</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[k];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(FILE_PATH);<br>            <span class="hljs-keyword">while</span>((length = fileReader.read(chars))!=-<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>                    System.out.print(chars[i]);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(fileReader!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileReader.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-FileWriter"><a href="#2-5-FileWriter" class="headerlink" title="2.5 FileWriter"></a>2.5 FileWriter</h2><p>常用方法</p><ul><li>write()</li><li>write(char[] chars)</li><li>wiret(char[] chars,int start,int end);</li></ul><p><strong>FileWriter写文件的时候，一定要关闭文件</strong></p><h1 id="3-节点流与处理流"><a href="#3-节点流与处理流" class="headerlink" title="3. 节点流与处理流"></a>3. 节点流与处理流</h1><p><img src="/2022/08/01/JavaIO/image-20220807164124164.png" alt="image-20220807164124164"></p><p><strong>基本介绍</strong></p><ol><li>节点流可以从一个特定的数据源读写数据，如FileReader，FileWriter</li><li>处理流(也叫包装流)是连接在已存在的流(节点流或者处理流)之上，为程序提供更为强大的读写功能。如BufferReader,BufferWriter</li></ol><p>红框中的均为节点流，代码主要运用了装饰者模式</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型</title>
    <link href="/2022/08/01/Java%E6%B3%9B%E5%9E%8B/"/>
    <url>/2022/08/01/Java%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1. 泛型概述"></a>1. 泛型概述</h1><h2 id="1-1-泛型产生背景"><a href="#1-1-泛型产生背景" class="headerlink" title="1.1 泛型产生背景"></a>1.1 泛型产生背景</h2><p>​    Java推出泛型前，程序员可以构建一个元素类型为Object的集合，该集合能够存储任意的数据对线类型，而在使用该集合过程中，需要程序员明确指定存储每个元素的数据类型，否则很容易引发<strong>Class Cast Exception</strong>异常</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java">publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">example</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-number">100</span>);<br>        list.add(<span class="hljs-string">&quot;你号&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; list.size() ; i++)&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> list.get(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) o;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码就会在Integer转化为String类型时报异常。</p><h2 id="1-2-泛型本质"><a href="#1-2-泛型本质" class="headerlink" title="1.2 泛型本质"></a>1.2 泛型本质</h2><p>​    泛型的本质是<strong>参数化类型</strong>，JDK1.5引入的新特性，如果类型不匹配则会在编译时报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">publci <span class="hljs-keyword">class</span> <span class="hljs-title class_">example</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;100&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;你号&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; list.size() ; i++)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> list.get(i);<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-泛型的好处"><a href="#1-3-泛型的好处" class="headerlink" title="1.3 泛型的好处"></a>1.3 泛型的好处</h2><ul><li>类型安全</li><li>消除了强制类型转换</li></ul><h1 id="2-泛型类"><a href="#2-泛型类" class="headerlink" title="2. 泛型类"></a>2. 泛型类</h1><h2 id="2-1-泛型类定义"><a href="#2-1-泛型类定义" class="headerlink" title="2.1 泛型类定义"></a>2.1 泛型类定义</h2><blockquote><p>泛型类的定义语法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名称 &lt;泛型标识,泛型标识,...&gt; &#123;<br>    <span class="hljs-keyword">private</span> 泛型标识 变量名;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>常见的泛型标识: T、E、K、V</li></ul><blockquote><p>泛型类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T key;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span>&#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.key;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(T key)</span>&#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>泛型类，如果没有指定具体的数据类型，此时，操作类型是Object</strong>,即<strong>一般类就是Object类型的泛型类</strong></li><li>泛型类，不支持基本数据类型</li><li>同一泛型类，根据不同的数据类型创建对象，本质上是一样的</li></ol><h2 id="2-2-泛型类使用"><a href="#2-2-泛型类使用" class="headerlink" title="2.2 泛型类使用"></a>2.2 泛型类使用</h2><p>以抽奖为例来介绍泛型类的使用，新建一个奖品类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T t;<br><br>    ArrayList&lt;T&gt; productList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加奖品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(T t)</span>&#123;<br>        productList.add(t);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 随机获取奖品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getProduct</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(productList.size() == <span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;抱歉,奖品池子为空!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * productList.size());<br>            <span class="hljs-keyword">return</span> productList.get(randomIndex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建一个测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>     Product&lt;String&gt; stringProduct = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>&lt;&gt;();<br>     String[] products = &#123;<span class="hljs-string">&quot;苹果手机&quot;</span>,<span class="hljs-string">&quot;华为手机&quot;</span>,<span class="hljs-string">&quot;VIVO手机&quot;</span>&#125;;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; products.length; i++) &#123;<br>         stringProduct.addProduct(products[i]);<br>     &#125;<br><br>     <span class="hljs-type">String</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> stringProduct.getProduct();<br>     System.out.println(<span class="hljs-string">&quot;恭喜您,抽中了&quot;</span> + product);<br><br><br>     Product&lt;Integer&gt; integerProduct = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>&lt;&gt;();<br>     Integer[] products1 = &#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">500</span>&#125;;<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; products1.length; i++) &#123;<br>         integerProduct.addProduct(products1[i]);<br>     &#125;<br><br>     <span class="hljs-type">Integer</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> integerProduct.getProduct();<br>     System.out.println(<span class="hljs-string">&quot;恭喜你获得&quot;</span>+product1 + <span class="hljs-string">&quot;元&quot;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-泛型类继承"><a href="#2-3-泛型类继承" class="headerlink" title="2.3 泛型类继承"></a>2.3 泛型类继承</h2><blockquote><p>从泛型类派生之类</p></blockquote><ol><li>如果子类是泛型类，则子类和父类的泛型标识要一致</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChilcClass</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ParentClass</span>&lt;T&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>如果子类不是泛型类，那么父类要明确泛型的具体类型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ParentClass</span>&lt;String&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>如果父类不是泛型类，或者说父类是Object类型的泛型类，则算是第二种的特殊情况</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ParentClss</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>理解起来也很容易,在创建父类对象的适合首先需要调用子类的构造方法，需要将泛型从子类传到父类</strong></p><p>当然子类可以对父类原来的泛型进行泛型扩展，但是必须有父类的泛型标识，这符合对于继承的理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span>&lt;T,K,E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ParentClass</span>&lt;T&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h1 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3. 泛型接口"></a>3. 泛型接口</h1><blockquote><p>泛型接口定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名称 &lt;泛型标识,泛型标识,...&gt; &#123;<br>    泛型标识 方法名();<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>泛型接口的使用</p></blockquote><ul><li>泛型接口的实现类如果不是泛型类，那么泛型接口要明确泛型类型</li><li>泛型接口的实现类如果也是泛型类，则泛型标识要一直</li></ul><p>接口如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">say</span>&lt;T&gt; &#123;<br>    T <span class="hljs-title function_">sayT</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类几种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 泛型标识一致</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SayImpl</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Say</span>&lt;T&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">sayT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2. 接口指定泛型类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SayImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Say</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 3. 实现类泛型标识扩展</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SayImpl</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Say</span>&lt;K&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">sayT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-泛型方法"><a href="#4-泛型方法" class="headerlink" title="4. 泛型方法"></a>4. 泛型方法</h1><h2 id="4-1-泛型方法和泛型类的区别"><a href="#4-1-泛型方法和泛型类的区别" class="headerlink" title="4.1 泛型方法和泛型类的区别"></a>4.1 泛型方法和泛型类的区别</h2><ol><li>泛型类,是在实例化类的时候指明泛型的具体类型</li><li>泛型方法.是在调用方法的时候指明泛型的具体类型</li><li>泛型类中<strong>带有泛型标识的成员方法不能是静态方法</strong></li><li><strong>泛型方法可以是静态的</strong></li><li>泛型方法可以独立于类</li></ol><p>泛型方法的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 &lt;T,E,...&gt; 返回值类型 方法名(形参列表)&#123;<br>    方法体...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>访问修饰符与方法名中间的泛型标识列表声明该方法是一个泛型犯法</li></ul><p><strong>定义泛型方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义泛型方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list 参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型标识</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getProduct</span><span class="hljs-params">(ArrayList&lt;T&gt; list)</span>&#123;<br>    <span class="hljs-keyword">if</span>(list.size() == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * list.size());<br>    <span class="hljs-keyword">return</span> list.get(randomIndex);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可变参数的泛型方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(E... e)</span>&#123;<br>    <span class="hljs-keyword">for</span>(E element: e)&#123;<br>        System.out.println(element);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-类型通配符"><a href="#5-类型通配符" class="headerlink" title="5. 类型通配符"></a>5. 类型通配符</h1><h2 id="5-1-类型通配符"><a href="#5-1-类型通配符" class="headerlink" title="5.1 类型通配符"></a>5.1 类型通配符</h2><p>有如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Box</span><span class="hljs-params">(T number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> number;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNumber</span><span class="hljs-params">(T number)</span> &#123;<br>        <span class="hljs-built_in">this</span>.number = number;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    showBox(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Number&gt;(<span class="hljs-number">50</span>));<br>    <span class="hljs-comment">//showBox(new Box&lt;Integer&gt;(45)); ————&gt;error</span><br>    <span class="hljs-comment">//showBox(new Box&lt;Float&gt;(10L));  ————&gt;error</span><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBox</span><span class="hljs-params">(Box&lt;Number&gt; box)</span>&#123;<br>    <span class="hljs-type">Number</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> box.getNumber();<br>    System.out.println(number);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到,我们定义的时候定义的是Number类型的泛型，<strong>使用Number的子类型编译器会报错</strong>。为了解决这个问题我们可以使用泛型通配符配合extends</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    showBox(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Number&gt;(<span class="hljs-number">50</span>));<br>    showBox(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Integer&gt;(<span class="hljs-number">45</span>));<br>    showBox(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;Float&gt;(<span class="hljs-number">10.00F</span>));<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBox</span><span class="hljs-params">(Box&lt;? extends Number&gt; box)</span>&#123;<br>    <span class="hljs-type">Number</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> box.getNumber();<br>    System.out.println(number);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-类型通配符上限"><a href="#5-2-类型通配符上限" class="headerlink" title="5.2 类型通配符上限"></a>5.2 类型通配符上限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">class/interface &lt;? extends 实参类型&gt;<br></code></pre></td></tr></table></figure><p><strong>要求传入的类型只能是实参类型或者实参类型的子类型</strong></p><p>参考文章:<a href="https://blog.csdn.net/hudashi/article/details/105417555">Java 泛型的不变性 (invariance)、协变性 (covariance)、逆变性 (contravariance)_古月书斋的博客-CSDN博客</a> </p><p>新建类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MiniCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cat</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCat</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Animal&gt; animalList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Cat&gt; catList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;MiniCat&gt; miniCatList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//showCats(animalList); ——&gt; error</span><br>        showCats(catList);<br>        showCats(miniCatList);<br><br>        <span class="hljs-comment">//catList.addAll(animalList); ——&gt; error</span><br>        catList.addAll(miniCatList);<br>        catList.addAll(catList);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showCats</span><span class="hljs-params">(List&lt;? extends Cat&gt; catList)</span>&#123;<br>        <span class="hljs-comment">// catList.set(new Cat()); ——&gt; error 协变无法set,很明显加入传入的是miniCat此时set会报错</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; catList.size() ; i ++)&#123;<br>            <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> catList.get(i);<br>            System.out.println(cat);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-类型通配符下限"><a href="#5-3-类型通配符下限" class="headerlink" title="5.3 类型通配符下限"></a>5.3 类型通配符下限</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">class/interface &lt;? <span class="hljs-built_in">super</span> 实参类型&gt;<br></code></pre></td></tr></table></figure><p><strong>要求传入的类型只能是实参类型或者实参类型的父类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 由于传入的类型只能是Cat和他的父类,因此可以set Cat和他的子类,但是Get时无法确定具体类型，只能用Object</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showCats2</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> Cat&gt; catList)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; catList.size(); i ++)&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> catList.get(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-泛型擦除"><a href="#6-泛型擦除" class="headerlink" title="6. 泛型擦除"></a>6. 泛型擦除</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// class version 52.0 (52)</span><br><span class="hljs-comment">// access flags 0x21</span><br><span class="hljs-comment">// signature &lt;T:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class="hljs-comment">// declaration: com/zjw/demo3/Erasure&lt;T&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>/zjw/demo3/Erasure &#123;<br><br>  <span class="hljs-comment">// compiled from: Erasure.java</span><br><br>  <span class="hljs-comment">// access flags 0x2</span><br>  <span class="hljs-comment">// signature TT;</span><br>  <span class="hljs-comment">// declaration: key extends T</span><br>  <span class="hljs-keyword">private</span> Ljava/lang/Object; key<br><br>  <span class="hljs-comment">// access flags 0x1</span><br>  <span class="hljs-keyword">public</span> &lt;init&gt;()V<br>   L0<br>    LINENUMBER <span class="hljs-number">3</span> L0<br>    ALOAD <span class="hljs-number">0</span><br>    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V<br>    RETURN<br>   L1<br>    LOCALVARIABLE <span class="hljs-built_in">this</span> Lcom/zjw/demo3/Erasure; L0 L1 <span class="hljs-number">0</span><br>    <span class="hljs-comment">// signature Lcom/zjw/demo3/Erasure&lt;TT;&gt;;</span><br>    <span class="hljs-comment">// declaration: this extends com.zjw.demo3.Erasure&lt;T&gt;</span><br>    MAXSTACK = <span class="hljs-number">1</span><br>    MAXLOCALS = <span class="hljs-number">1</span><br><br>  <span class="hljs-comment">// access flags 0x1</span><br>  <span class="hljs-comment">// signature ()TT;</span><br>  <span class="hljs-comment">// declaration: T getKey()</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>Ljava/lang/Object;<br>   L0<br>    LINENUMBER <span class="hljs-number">7</span> L0<br>    ALOAD <span class="hljs-number">0</span><br>    GETFIELD com/zjw/demo3/Erasure.key : Ljava/lang/Object;<br>    ARETURN<br>   L1<br>    LOCALVARIABLE <span class="hljs-built_in">this</span> Lcom/zjw/demo3/Erasure; L0 L1 <span class="hljs-number">0</span><br>    <span class="hljs-comment">// signature Lcom/zjw/demo3/Erasure&lt;TT;&gt;;</span><br>    <span class="hljs-comment">// declaration: this extends com.zjw.demo3.Erasure&lt;T&gt;</span><br>    MAXSTACK = <span class="hljs-number">1</span><br>    MAXLOCALS = <span class="hljs-number">1</span><br><br>  <span class="hljs-comment">// access flags 0x1</span><br>  <span class="hljs-comment">// signature (TT;)V</span><br>  <span class="hljs-comment">// declaration: void setKey(T)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(Ljava/lang/Object;)</span>V<br>   L0<br>    LINENUMBER <span class="hljs-number">11</span> L0<br>    ALOAD <span class="hljs-number">0</span><br>    ALOAD <span class="hljs-number">1</span><br>    PUTFIELD com/zjw/demo3/Erasure.key : Ljava/lang/Object;<br>   L1<br>    LINENUMBER <span class="hljs-number">12</span> L1<br>    RETURN<br>   L2<br>    LOCALVARIABLE <span class="hljs-built_in">this</span> Lcom/zjw/demo3/Erasure; L0 L2 <span class="hljs-number">0</span><br>    <span class="hljs-comment">// signature Lcom/zjw/demo3/Erasure&lt;TT;&gt;;</span><br>    <span class="hljs-comment">// declaration: this extends com.zjw.demo3.Erasure&lt;T&gt;</span><br>    LOCALVARIABLE key Ljava/lang/Object; L0 L2 <span class="hljs-number">1</span><br>    <span class="hljs-comment">// signature TT;</span><br>    <span class="hljs-comment">// declaration: key extends T</span><br>    MAXSTACK = <span class="hljs-number">2</span><br>    MAXLOCALS = <span class="hljs-number">2</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2022/08/01/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/08/01/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2022/07/11/MySQL/"/>
    <url>/2022/07/11/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1. 数据库概述"></a>1. 数据库概述</h1><h2 id="1-1-为什么使用数据库"><a href="#1-1-为什么使用数据库" class="headerlink" title="1.1 为什么使用数据库"></a>1.1 为什么使用数据库</h2><ul><li>持久化，内存中的数据断电即失，使用数据库</li></ul><h2 id="1-2-数据库相关术语"><a href="#1-2-数据库相关术语" class="headerlink" title="1.2 数据库相关术语"></a>1.2 数据库相关术语</h2><p><strong>DB: 数据库(Database)</strong></p><p><strong>DBMS: 数据库管理系统</strong></p><p><strong>SQL: 结构化查询语言(Structured Query Language)</strong></p><p>这几个概念笔比较简单，数据库指的是我们的数据库文件，数据库管理系统则相当于MySQL，对数据库进行统一管理和控制</p><p><img src="/2022/07/11/MySQL/image-20220711222406283.png" alt="image-20220711222406283"></p><p><strong>ORM(Object Relational Mapping)</strong></p><p>对象关系映射</p><figure class="highlight coq"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs coq">数据库中的一个表 ———&gt; 类  ——————————<span class="hljs-keyword">Class</span><br><br>表中的一条记录    ———&gt;  类实例对象——————— <span class="hljs-keyword">Instance</span><br><br>表中某一列           ———&gt;  类中的一个字段  ———— <span class="hljs-keyword">Field</span><br></code></pre></td></tr></table></figure><p><strong>E-R图（Entity Relationship Diagram）</strong></p><p>实体关系图</p><h1 id="2-MySQL基础"><a href="#2-MySQL基础" class="headerlink" title="2. MySQL基础"></a>2. MySQL基础</h1><h2 id="2-1-MySQL常见命令"><a href="#2-1-MySQL常见命令" class="headerlink" title="2.1 MySQL常见命令"></a>2.1 MySQL常见命令</h2><p><strong>1.MySQL服务命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>net start MySQL服务名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭服务</span><br>net stop MySQL服务命<br></code></pre></td></tr></table></figure><p><strong>在Windows环境下，需要以管理员身份运行cmd</strong></p><p><strong>2.MySQL连接命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-u  User 用户名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-P  Port 端口号</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-h  host 主机IP</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p  password 密码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> 如果连接的是本机的3306端口则可以省略</span><br>mysql -u root -P 3306 -h localhost -p [密码]<br></code></pre></td></tr></table></figure><p>3.MySQL查看版本**</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式1 未登陆</span><br>mysql --version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式2 登陆之后</span><br><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">select version()</span><br></code></pre></td></tr></table></figure><p><strong>4.查看创建数据库和数据表时的语句信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">show create &lt;database|table&gt; [database_Name| table_Name]<br></code></pre></td></tr></table></figure><p><strong>关于不同版本创建数据库的编码问题</strong></p><p>MySQL 5.7  默认是拉丁</p><p>MySQL 8.0  默认是UTF-8</p><h1 id="3-SQL概述与分类"><a href="#3-SQL概述与分类" class="headerlink" title="3. SQL概述与分类"></a>3. SQL概述与分类</h1><h2 id="3-1-SQL分类"><a href="#3-1-SQL分类" class="headerlink" title="3.1 SQL分类"></a>3.1 SQL分类</h2><table><thead><tr><th>分类</th><th>备注</th><th>涉及关键字</th></tr></thead><tbody><tr><td>DDL(Data Definition Languages、数据定义语言)</td><td>这些语句定义了不同的数据库、表、视图、索引等数据对象，还可以用来创建、删除、修改数据库和数据表结构</td><td>CREATE、DROP、ALTER</td></tr><tr><td>DML(Data Manipulation Language、数据操作语言)</td><td>用于添加、删除、更新和查询数据记录</td><td>INSERT、DELETE、UPDATE、SELECT</td></tr><tr><td>DCL(Data Control Language、数据控制语言)</td><td>用于定义数据库、表、字段、用户的访问权限和安全级别。</td><td>GRANT、REOKE、COMMIT、ROLLBACK、SAVEPOINT</td></tr></tbody></table><h2 id="3-2-数据库操作"><a href="#3-2-数据库操作" class="headerlink" title="3.2 数据库操作"></a>3.2 数据库操作</h2><blockquote><ol><li>DISTINCT</li></ol></blockquote><p><strong>去除重复行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过DISTINCT取出重复行</span><br>SELECT DISTINCT [field] From [Table]<br></code></pre></td></tr></table></figure><p><strong>基础数据表</strong></p><table><thead><tr><th>员工编号</th><th>姓名</th><th>薪水</th><th>部门编号</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1000.00</td><td>1</td></tr><tr><td>2</td><td>李四</td><td>1200.00</td><td>1</td></tr><tr><td>3</td><td>王五</td><td>1100.00</td><td>2</td></tr><tr><td>4</td><td>赵六</td><td>1400.00</td><td>3</td></tr><tr><td>5</td><td>钱七</td><td>1500.00</td><td>3</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 实际意义就是查询所有部门号<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> dep_id <span class="hljs-keyword">From</span> Employee;<br></code></pre></td></tr></table></figure><p><strong>结果</strong></p><table><thead><tr><th>dep_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td>3</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 这个会报错,因为id有<span class="hljs-number">5</span>条，而dep_id只有三条，会error<br><span class="hljs-keyword">SELECT</span> id,<span class="hljs-keyword">DISTINCT</span> dep_id <span class="hljs-keyword">from</span> employee<br><br># 这个不会报错,但没有实际意义，表示去除id和dep_id相同的数据信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> id,dep_id <span class="hljs-keyword">from</span> employee<br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>NULL和0</li></ol></blockquote><ol><li><p>空值不等同与0</p></li><li><p>空值参与运算返回结果均为0</p></li><li><p>IFNULL(字段名，0) 表示如果字段名为NULL,那么就令他为0</p></li></ol><blockquote><ol start="3"><li>DESCRIBE</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"># 显示表结构<br><span class="hljs-keyword">DESCRIBE</span> [<span class="hljs-keyword">table</span>]<br></code></pre></td></tr></table></figure><blockquote><ol start="4"><li>WHERE过滤数据</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employee <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring5</title>
    <link href="/2022/07/10/spring5/"/>
    <url>/2022/07/10/spring5/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Spring的概念"><a href="#1-Spring的概念" class="headerlink" title="1. Spring的概念"></a>1. Spring的概念</h1><h2 id="1-1-Spring概述"><a href="#1-1-Spring概述" class="headerlink" title="1.1 Spring概述"></a>1.1 Spring概述</h2><ul><li>Spring是JavaEE编程领域的一个<strong>轻量级开源框架</strong></li><li>Spring框架的核心功能是IOC和AOP</li></ul><h2 id="1-2-Spring核心功能"><a href="#1-2-Spring核心功能" class="headerlink" title="1.2 Spring核心功能"></a>1.2 Spring核心功能</h2><ol><li><strong>IOC</strong>: Inversion ofControl 控制反转，将创建对象的过程交给容器</li><li><strong>AOP</strong>: Aspect Oriented Programming： 面向切面编程，不修改源代码对代码的功能进行增强</li></ol><h2 id="1-3-Spring特点"><a href="#1-3-Spring特点" class="headerlink" title="1.3 Spring特点"></a>1.3 Spring特点</h2><ol><li><strong>方便解耦，简化开发</strong></li><li><strong>AOP编程的支持</strong></li><li><strong>声明式事务的支持</strong></li><li><strong>方便程序的测试</strong></li><li><strong>方便集成各种优秀的框架</strong></li></ol><h1 id="2-IOC容器"><a href="#2-IOC容器" class="headerlink" title="2. IOC容器"></a>2. IOC容器</h1><h2 id="2-1-IOC概念和原理"><a href="#2-1-IOC概念和原理" class="headerlink" title="2.1 IOC概念和原理"></a>2.1 IOC概念和原理</h2><blockquote><p>2.1.1 什么是IOC</p></blockquote><ol><li>控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</li><li>使用IOC目的： 为了降低耦合度</li></ol><blockquote><p>2.1.2 IOC底层原理</p></blockquote><ol><li>xml解析、工厂模块、反射</li></ol><blockquote><p>2.1.3 图解IOC底层原理</p></blockquote><p>传统方式调用:</p><p><img src="/2022/07/10/spring5/image-20220710103741121.png" alt="image-20220710103741121"></p><p>工厂模块调用:</p><p><img src="/2022/07/10/spring5/image-20220710104150958.png" alt="image-20220710104150958"></p><h2 id="2-2-IOC过程"><a href="#2-2-IOC过程" class="headerlink" title="2.2 IOC过程"></a>2.2 IOC过程</h2><ol><li>xml配置文件，创建配置的对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userdao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>有service类和dao类，创建工厂类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">classValue</span> <span class="hljs-operator">=</span> class属性值; <span class="hljs-comment">//通过xmk解析完成</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">class</span> <span class="hljs-operator">=</span> Class.forName(classValue); <span class="hljs-comment">//通过反射获取类对象</span><br>    <span class="hljs-keyword">return</span> (UserDao)class.newInstance(); <span class="hljs-comment">//通过类对象创建类实例</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-IOC-接口"><a href="#2-3-IOC-接口" class="headerlink" title="2.3 IOC(接口)"></a>2.3 IOC(接口)</h2><ol><li><p>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂</p></li><li><p>Spring提供IOC容器实现两种方式:（两个接口）</p><ul><li>BeanFactory: IOC容器基本实现，是Spring内部的使用接口，不提供开发人员使用，<strong>加载配置文件时候不会创建对象，在获取对象才会创建对象</strong></li><li>ApplicationContext： BeanFactory接口的子接口，提供更多强大的功能，一般由开发人员进行使用，<strong>加载配置文件的时候就会创建对象</strong></li></ul></li><li><p>ApplicationContext实现类</p></li></ol><h2 id="2-4-IOC操作Bean管理"><a href="#2-4-IOC操作Bean管理" class="headerlink" title="2.4 IOC操作Bean管理"></a>2.4 IOC操作Bean管理</h2><blockquote><p>初始User类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>什么是Bean管理</strong></p><ol><li>Spring创建对象</li><li>Spring注入属性</li></ol><p><strong>Bean管理操作两种实现方式</strong></p><ol><li>基于xml配置文件方式实现</li><li>基于注解方式</li></ol><blockquote><p>2.4.1 基于xml方式创建对象</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>在spring配置文件中，使用标签，标签里面添加对应属性，就可以实现对象的创建</li><li>在bean标签中有很多属性，介绍创建的属性</li></ol><ul><li><strong>id属性:</strong> 唯一标识</li><li><strong>class属性:</strong> 类的全路径</li></ul><ol start="3"><li>通过对象时候，默认也是执行无参构造方法创建对象</li></ol><blockquote><p>2.4.2 基于xml方式注入属性</p></blockquote><ol><li>DI: 依赖注入，就是注入属性</li></ol><ul><li><p><strong>方式1</strong>: 使用setter()方法注入</p><p> 第一步: 创建对象定义，里面添加setter()方法</p><p> 第二步: 修改xml配置文件，使用property属性来使用</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zjw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>方式2</strong>: 有参构造注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span> &gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lyt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;17&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;specialUser&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>方式3</strong>: 使用p名称空间注入(了解即可)</li></ul><h2 id="2-5-xml方式注入特殊属性值"><a href="#2-5-xml方式注入特殊属性值" class="headerlink" title="2.5 xml方式注入特殊属性值"></a>2.5 xml方式注入特殊属性值</h2><blockquote><p>2.5.1 注入空值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5.2 属性值中有特殊符号</p></blockquote><ul><li>方式1: 使用转义字符</li><li>方式2: CDATA</li></ul><blockquote><p>2.5.3 注入属性—外部bean</p></blockquote><ol><li>创建两个类service类和dao类</li><li>在service调用dao里面的方法</li></ol><p><strong>使用ref来注入外部bean，ref引用的意思</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.service.UserService&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.dao.UserDaoImpl&quot;</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5.4 注入属性–内部Bean</p></blockquote><ol><li>以部门和员工为例，一个部门可以有多个员工，员工属于某一个部门</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Department department;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer name;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 内部bean--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Employee&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zjw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--嵌套定义--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;department&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Department&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部门&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>2.5.5 注入属性–级联赋值</p></blockquote><p><strong>上面的代码就是级联赋值</strong></p><blockquote><p>2.5.6 注入集合</p></blockquote><ol><li>注入数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 数组类型注入 --&gt;<br>   &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> class=<span class="hljs-string">&quot;com.zjw.User&quot;</span>&gt;<br>       &lt;property name=<span class="hljs-string">&quot;friends&quot;</span>&gt;<br>           &lt;array&gt;<br>               &lt;value&gt;Alex&lt;/value&gt;<br>               &lt;value&gt;Joker&lt;/value&gt;<br>           &lt;/array&gt;<br>       &lt;/property&gt;<br>   &lt;/bean&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>注入List集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 注入list类型 --&gt;<br>&lt;property name=<span class="hljs-string">&quot;courses&quot;</span>&gt;<br>    &lt;list&gt;<br>        &lt;value&gt;线性代数&lt;/value&gt;<br>        &lt;value&gt;高等数学&lt;/value&gt;<br>    &lt;/list&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>注入Map集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">&lt;property name=<span class="hljs-string">&quot;maps&quot;</span>&gt;<br>    &lt;map&gt;<br>        &lt;entry key=<span class="hljs-string">&quot;PHT&quot;</span> value=<span class="hljs-string">&quot;PHP&quot;</span>&gt;&lt;/entry&gt;<br>        &lt;entry key=<span class="hljs-string">&quot;JAVA&quot;</span> value=<span class="hljs-string">&quot;java&quot;</span>&gt;&lt;/entry&gt;<br>    &lt;/map&gt;<br>&lt;/property&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>在集合中使用对象类型</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">propertry</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span> = <span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-IOC管理Bean"><a href="#2-6-IOC管理Bean" class="headerlink" title="2.6 IOC管理Bean"></a>2.6 IOC管理Bean</h2><p>bean分为两种:</p><ul><li>普通Bean   xml中定义Bean的类型就是返回的类型</li><li>工厂Bean   配合的类型和返回的类型不一样</li></ul><ol><li>创建类，让这个类作为工厂bean，实现接口FactoryBean</li><li>实现接口里面的方法，在实现的方法中定义返回的Bean类型</li></ol><p><strong>工厂Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义返回Bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">18</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-7-Bean的作用域"><a href="#2-7-Bean的作用域" class="headerlink" title="2.7 Bean的作用域"></a>2.7 Bean的作用域</h2><p><img src="/2022/07/10/spring5/image-20220710163252902.png" alt="image-20220710163252902"></p><h2 id="2-8-Bean的生命周期"><a href="#2-8-Bean的生命周期" class="headerlink" title="2.8 Bean的生命周期"></a>2.8 Bean的生命周期</h2><p>Bean的生命周期: 从对象的创建——&gt; 对象的销毁</p><ol><li>通过构造器创建bean实例</li><li>为bean里面的属性设置值和对其它bean的引用</li><li>调用bean的初始化方法</li><li>bean 就可以使用了</li><li>对象销毁</li></ol><p><img src="/2022/07/10/spring5/image-20220710164732702.png" alt="image-20220710164732702"></p><h2 id="2-9-xml自动装配"><a href="#2-9-xml自动装配" class="headerlink" title="2.9 xml自动装配"></a>2.9 xml自动装配</h2><p><strong>什么是自动装配</strong></p><ol><li><p>根据指定装配规则(属性名或者属性类型),Spring自动将匹配的类型注入</p></li><li><p>演示自动装配过程</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zjw.entity.Teacher&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;alex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span> <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>autowire &#x3D; byName 判断条件 bean的id值和类属性里面的id值一样</li><li>autowire &#x3D; byType 判断条件是根据类型进行判断，如果类型有多个则无法判断</li></ul><h2 id="2-10-基于注解方式实现"><a href="#2-10-基于注解方式实现" class="headerlink" title="2.10 基于注解方式实现"></a>2.10 基于注解方式实现</h2><p>Spring针对Bean管理中创建对象提供的注解</p><ul><li>@Component   基础注解</li><li>@Service           建议放在service层</li><li>@Controller      建议放在Controller层</li><li>@Repository     建议放在dao层</li></ul><p><strong>上面的四个注解功能是一样的，都可以用来创建bean实例</strong></p><blockquote><p>基于注解方式实现对象创建</p></blockquote><ol><li>引入AOP依赖</li><li>开启组件扫码 <strong>Component-sacn</strong></li><li>创建类，在类上面添加上面四个注解中的一个</li></ol><blockquote><p>精确配置扫码</p></blockquote><p><img src="/2022/07/10/spring5/image-20220710203346892.png" alt="image-20220710203346892"></p><blockquote><p>基于注解方式实现属性注入</p></blockquote><ul><li><p>@AutoWired</p><p><strong>根据属性类型进行自动装配</strong></p></li><li><p>@Qualifier</p><p><strong>根据属性名称自动注入</strong>,这个注解要和@AutoWired一起使用</p></li><li><p>@Resource</p><p><strong>可以根据类型注入，可以根据名称注入</strong></p></li><li><p>@Value</p><p>针对普通类型的注入</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>&#125;<br><br>===================================================================<br>    <br><span class="hljs-meta">@Repository(value = &quot;userDaoImpl0&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;实现了add()&quot;</span>);<br>    &#125;<br>&#125;<br><br>===================================================================<br>    <br><span class="hljs-meta">@Repository(value = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1.........&quot;</span>);<br>    &#125;<br>&#125;<br><br>====================================================================<br>    <br><span class="hljs-meta">@Service(value = &quot;uService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        userDao.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ol><li>如果一个接口有多个实现类，那么使用autowired就会自动装配失败，运行时会出现下面bug</li></ol><p><img src="/2022/07/10/spring5/image-20220710204724151.png" alt="./image-20220710204724151"></p><ol start="2"><li>Resouce默认时根据类型进行注入，name指定值后根据名称进行注入</li></ol><h2 id="2-11-完全注解开发"><a href="#2-11-完全注解开发" class="headerlink" title="2.11 完全注解开发"></a>2.11 完全注解开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.zjw&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>      <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> applicationContext.getBean(<span class="hljs-string">&quot;uService&quot;</span>,UserService.class);<br><br>      userService.add();<br><br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="3-Aop"><a href="#3-Aop" class="headerlink" title="3. Aop"></a>3. Aop</h1><h2 id="3-1-AOP概念"><a href="#3-1-AOP概念" class="headerlink" title="3.1 AOP概念"></a>3.1 AOP概念</h2><ul><li>基于代理模式，面向切面，不修改源代码对功能进行增强，实际常用于统一日志处理</li></ul><p><strong>动态代理</strong></p><ol><li>有接口  ——&gt; 使用JDK动态代理</li><li>没有接口 ——&gt; 使用CGLIB动态代理，基于字节码技术</li></ol><blockquote><p>jdk动态代理demo</p></blockquote><ol><li>创建接口，定义方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserLogin</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登陆方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建接口的实现类，实现方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserLogin</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;=====开始输入用户名和密码====&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;=====点击登录===============&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>使用Proxy类增强方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建接口实现类代理对象</span><br>        Class[] interfaces = &#123;UserLogin.class&#125;;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1: 类加载器</span><br><span class="hljs-comment">         * 参数2: 接口类对象数组</span><br><span class="hljs-comment">         * 参数3: InvocationHandler实现类</span><br><span class="hljs-comment">         */</span><br>        UserLogin userLoginImpl= <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLoginImpl</span>();<br>        <span class="hljs-type">UserLogin</span> <span class="hljs-variable">userLogin1</span> <span class="hljs-operator">=</span> (UserLogin) Proxy.newProxyInstance(ProxyTest.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLoginProxy</span>(userLoginImpl));<br>        userLogin1.login();<br>    &#125;<br><br><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>&#123;<br><br>    <span class="hljs-comment">//需要传递需要代理的目标对象</span><br>    <span class="hljs-keyword">public</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserLoginProxy</span><span class="hljs-params">(Object target)</span>&#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//增强的逻辑</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <br><br>        System.out.println(<span class="hljs-string">&quot;调用方法前的操作&quot;</span>);<br><br>        <span class="hljs-comment">// 反射调用需要增强的方法</span><br>        method.invoke(target,args);<br><br>        System.out.println(<span class="hljs-string">&quot;打印登陆日志信息&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-2-切入点表达式"><a href="#3-2-切入点表达式" class="headerlink" title="3.2 切入点表达式"></a>3.2 切入点表达式</h2><ol><li>切入点表达式作用：知道对哪个类的哪个方法进行增强</li><li>语法结构</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))<br></code></pre></td></tr></table></figure><p>举例1: 对com.zjw.dao.BookDao类里面的add()进行增强</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* com.zjw.dao.BookDao.add(..)</span></span>)<br></code></pre></td></tr></table></figure><p>举例2: 对com.zjw.dao.BookDao类里面的所有方法进行增强</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* com.zjw.dao.BookDao.*(..)</span></span>)<br></code></pre></td></tr></table></figure><p>举例3: 对com.zjw.dao包里面所有类,所有方法进行增强</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">execution(<span class="hljs-name">*</span> com.zjw.dao.*.*(..))<br></code></pre></td></tr></table></figure><h1 id="4-JdbcTemplate"><a href="#4-JdbcTemplate" class="headerlink" title="4. JdbcTemplate"></a>4. JdbcTemplate</h1><p><strong>1.什么是JdbcTemplate</strong></p><ul><li>Spring框架对JDBC进行封装，是我们操作数据库更加方便</li></ul><p><strong>2. 引入jar包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring核心依赖  --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!--事务依赖--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.22.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.49<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>     <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.配置数据库连接池</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  读取properties里面的内容  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>4. 配置jdbcTemplate注入数据库连接池</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jdbcTemplate--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--set方式注入--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>5. 测试</strong></p><h1 id="5-事务管理"><a href="#5-事务管理" class="headerlink" title="5. 事务管理"></a>5. 事务管理</h1><p>事务四个特性:</p><ul><li>原子性:  Atomicity: 一个事务中的所有操作,要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>一致性: Consistency: 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>隔离性: Isolation：：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>持久性:  Durability:事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>典型场景: 银行转账</p><p><strong>事务处理</strong></p><ul><li><p>编程式事务处理</p></li><li><p>声明式事务处理（一般使用声明式事务处理）</p><ul><li>基于注解的方式</li><li>基于xml配置文件方式</li></ul></li></ul><p>在sprng中使用声明式事务，底层使用AOP原理</p><p>Spring提供了一个接口，代表事务管理器，这个接口针对不同的框架提供不同的实现类</p><p>注解@Transactional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Transactional &#123;<br>    <span class="hljs-meta">@AliasFor(&quot;transactionManager&quot;)</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String <span class="hljs-title function_">transactionManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// 事务的传播行为</span><br>    Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br><br>    Isolation <span class="hljs-title function_">isolation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Isolation.DEFAULT;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">timeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">readOnly</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] rollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] rollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span>&gt;[] noRollbackFor() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] noRollbackForClassName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口管理</strong></p><h1 id="6-Spring5新特性"><a href="#6-Spring5新特性" class="headerlink" title="6. Spring5新特性"></a>6. Spring5新特性</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Java框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="1-设计模式概述"><a href="#1-设计模式概述" class="headerlink" title="1. 设计模式概述"></a>1. 设计模式概述</h1><h2 id="1-1-设计模式目的"><a href="#1-1-设计模式目的" class="headerlink" title="1.1 设计模式目的"></a>1.1 设计模式目的</h2><p>使程序具有以下几个更好的特性</p><ul><li>代码重用性</li><li>可读性</li><li>可扩展性</li><li>可靠性</li><li>使程序呈现高内聚、低耦合的特性</li></ul><h2 id="1-2-设计模式七大原则"><a href="#1-2-设计模式七大原则" class="headerlink" title="1.2 设计模式七大原则"></a>1.2 设计模式七大原则</h2><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒置原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li><li>合成复用原则</li></ol><h1 id="2-七大原则"><a href="#2-七大原则" class="headerlink" title="2.七大原则"></a>2.七大原则</h1><h2 id="2-1-单一职责原则"><a href="#2-1-单一职责原则" class="headerlink" title="2.1 单一职责原则"></a>2.1 单一职责原则</h2><p>​    <strong>对类来说，一个类应该只负责一个或者一项职责。</strong></p><h2 id="2-2-接口隔离原则"><a href="#2-2-接口隔离原则" class="headerlink" title="2.2 接口隔离原则"></a>2.2 接口隔离原则</h2><p>​    <strong>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</strong></p><p><img src="/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220620171323633.png" alt="image-20220620171323633"></p><p>最佳实践是:</p><p><img src="/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20220620180748854.png" alt="image-20220620180748854"></p><h2 id="2-3-依赖倒转原则"><a href="#2-3-依赖倒转原则" class="headerlink" title="2.3 依赖倒转原则"></a>2.3 依赖倒转原则</h2><ol><li>高层模块不应该依赖底层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖于细节，细节应该依赖抽象</li><li>依赖倒转的中心思想是面向接口编程</li></ol><h2 id="2-4-里氏替换原则"><a href="#2-4-里氏替换原则" class="headerlink" title="2.4 里氏替换原则"></a>2.4 里氏替换原则</h2><ol><li>父类中实现的方法，之类最好不要重写</li><li>使用继承增加了对象间的耦合关系</li><li>在适当的情况下，可以通过聚合，组合，依赖来解决问题</li></ol><h2 id="2-5-开闭原则"><a href="#2-5-开闭原则" class="headerlink" title="2.5 开闭原则"></a>2.5 开闭原则</h2><ol><li>一个软件实体如类，模块和函数应该对扩展开放，对修改关闭。用抽象构建框架，用实现扩展细节</li><li>当软件需要发送变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li></ol><h2 id="2-6-迪米特法则"><a href="#2-6-迪米特法则" class="headerlink" title="2.6 迪米特法则"></a>2.6 迪米特法则</h2><ol><li>一个对象应该对其它对象保持最少的了解</li><li>类与类关系越密切，耦合度越大</li><li>最少知道原则，即一个类对自己依赖的类知道的越少越好。</li><li>只与直接朋友通信</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2022/04/23/docker/"/>
    <url>/2022/04/23/docker/</url>
    
    <content type="html"><![CDATA[<h1 id="1-docker镜像基本操作"><a href="#1-docker镜像基本操作" class="headerlink" title="1. docker镜像基本操作"></a>1. docker镜像基本操作</h1><h2 id="1-1-docker辅助命令"><a href="#1-1-docker辅助命令" class="headerlink" title="1.1 docker辅助命令"></a>1.1 docker辅助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">用来展示docker信息</span><br>docker info<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本号</span><br>docer version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker所有帮助命令</span><br>docker --help<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker命令格式  []-&gt;代表可选的</span><br>docker [options] command<br></code></pre></td></tr></table></figure><h2 id="1-2-操作镜像的相关命令"><a href="#1-2-操作镜像的相关命令" class="headerlink" title="1.2 操作镜像的相关命令"></a>1.2 操作镜像的相关命令</h2><blockquote><p>1.查看本地镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地仓库中存在哪些镜像</span><br>docker images<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看一个镜像名的所有版本</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以查出mysql:5.6 mysql:x.x</span><br>docker images mysql<br></code></pre></td></tr></table></figure><p><img src="/2022/04/23/docker/image-20220423134337961.png" alt="image-20220423134337961"></p><ul><li>REPOSITORY: 镜像名称</li><li>TAG: 版本</li><li>IMAGE ID: 镜像ID</li><li>CREATED: 镜像创建时间</li><li>SIZE: 镜像大小</li></ul><blockquote><p>2.拉取镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这是第一种方式,通过摘要也可以</span><br>docker pull 镜像名[:tag]<br>docker pull mysql:5.6.50<br></code></pre></td></tr></table></figure><blockquote><p>3.通过命令行搜索需要的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search 镜像名<br></code></pre></td></tr></table></figure><blockquote><p>4.删除镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除镜像</span><br>docker image rm name:tag | IMAGE ID<br>dokcer image rm -f name:tag | IMAGE ID<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除镜像的简化写法</span><br>docker rmi name:tag | image ID<br>docker rmi -f name:tag | image ID<br></code></pre></td></tr></table></figure><ul><li>要理解一个概念,再删除时如果我们删除可能会报下面错误,因为<strong>镜像时 容器的模板</strong>,容器就是运行时镜像</li></ul><p>Error response from daemon: conflict: unable to remove repository reference “hello-world:latest” (must force) - container 1170d6aadeb5 is using its referenced image feb5d9fea6a5</p><p>因为我们可以使用强制删除</p><blockquote><p>5.组合删除</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">删除所有镜像</span><br>docker rmi -f $(docker images -aq)<br></code></pre></td></tr></table></figure><h1 id="2-容器的相关命令"><a href="#2-容器的相关命令" class="headerlink" title="2. 容器的相关命令"></a>2. 容器的相关命令</h1><blockquote><p>1.将打包tar镜像文件导入自己的docker仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;imageName&gt; -&gt; 镜像名</span><br>docker load -i &lt;imageName&gt;<br><br>dokcer load -i redis-5.0.10.tar<br></code></pre></td></tr></table></figure><blockquote><p>2.运行容器、端口映射、后台启动、别名</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以tomcat为例去运行容器</span><br>docker run &lt;imageName:tag | imageId&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最简单方式运行容器</span><br>docker run tomcat:x.x<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">端口映射</span><br>docker run -p 8080(外部端口):8080(容器内服务监听端口) tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">后台启动,运行会会给我们返回一个容器ID</span><br>docker run -p 8080:8080 -d(后台启动) tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">起一个唯一标识</span><br>docker run -p 8080:8080 -d --name mysql01 tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><blockquote><p>3.查看容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br><br>docker ps --help<br></code></pre></td></tr></table></figure><blockquote><p>4.关闭、启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭容器</span><br>docker stop &lt;containerId | name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br>docker start &lt;containerId | name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker restart &lt;containerId | name&gt;<br></code></pre></td></tr></table></figure><p><img src="/2022/04/23/docker/image-20220423175349258.png" alt="image-20220423175349258"></p><blockquote><p>5.删除容器</p></blockquote><p>1.删除停止的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm &lt;containerId | name&gt;<br></code></pre></td></tr></table></figure><p>2.删除正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f &lt;containerId | name&gt;<br></code></pre></td></tr></table></figure><p>3.删除所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f $(docker ps -aq)<br></code></pre></td></tr></table></figure><blockquote><p>6.容器日志</p></blockquote><p>1.查看容器内服务运行日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日志</span><br>docker logs &lt;containerId&gt; | &lt;name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">实时展示日志</span><br>docker logs -f &lt;containerId&gt; | &lt;name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">展示日志最后n行</span><br>docker logs -n [number] &lt;containerId&gt;<br></code></pre></td></tr></table></figure><blockquote><p>7.容器交互</p></blockquote><p>1.查看容器内的进程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker top <span class="hljs-tag">&lt;<span class="hljs-name">containerId</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.进入容器内部交互</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker exex -it <span class="hljs-tag">&lt;<span class="hljs-name">containerId</span>&gt;</span> | <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> bash<br></code></pre></td></tr></table></figure><p>3.退出容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>4.操作系统与容器内的文件交互</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">1. 复制容器中的文件到宿主机中</span><br>docker cp &lt;容器唯一标识&gt;:容器内资源路径 操作系统中的路径<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2. 赋值宿主机中的文件到容器中</span><br>docker cp 文件|目录名 容器唯一标识:容器内资源路径<br></code></pre></td></tr></table></figure><p>5.查看容器内部细节</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">docker inspect <span class="hljs-attribute">&lt;容器唯一标识&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>8.数据卷Volume</p></blockquote><p>作用: 实现宿主机系统与容器之间的文件共享</p><p><img src="/2022/04/23/docker/image-20220423191451369.png" alt="image-20220423191451369"></p><p>数据卷的使用方式(在容器 运行时)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 宿主机目录:容器目录</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这是方式一:自定义数据卷目录</span><br><br>docker run -d -p 8080:8080 --name tomcat01 -v /home/apps/:/usr/local/tomcat/webapps tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><p>使用数据卷后,可以通过修改外部的宿主机文件来同步容器的文件,容器中原本的文件就没有了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二 自动数据卷目录</span><br>docker run -d -p 8080:8080 --name tomcat02 -v aa:/usr/local/tomcat/webapps tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><p>注意:</p><ol><li>aa代表一个数据卷名称,名称可以随便写,docker在不存在时胡自动创建这个数据卷同时自动映射宿主机中某个目录</li><li>同时在容器启动时会将aa对应容器目录中的内容辅助到aa中</li></ol><blockquote><p>9.将容器打包成一个新的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将正在运行的容器打包成一个镜像</span><br>docker commit -m “描述信息” -a “作者” 容器唯一标识 打包后的镜像名:版本号<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将镜像备份出来</span><br>docker save 镜像名称:Tag -o 文件名<br>docker save tomcat:1.0 -o tomcat-1.0.tar<br></code></pre></td></tr></table></figure><h1 id="3-docker镜像分层原理"><a href="#3-docker镜像分层原理" class="headerlink" title="3. docker镜像分层原理"></a>3. docker镜像分层原理</h1><blockquote><p>3.1 镜像定义</p></blockquote><p>定义:一个镜像代表一个软件 软件包 用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码、运行时所需的库、环境变量、配置文件</p><blockquote><p>3.2问题思考</p></blockquote><p>1.镜像为什么这么大？</p><p><strong>原因</strong>：一个软件镜像不仅仅是原来软件包,还包含软件所需的操作系统依赖 软件自身依赖 以及自身软件包组成</p><p>2.为什么docker镜像采用分层镜像原理</p><p>docker在设计镜像时每一个镜像都是由n个镜像组成 —&gt;镜像像一个花卷一层一层。</p><p>3.为什么采用联合文件系统</p><p>好处:最大的一个好处时资源共享 采用分层机制实现基础层共享 从而减少docker仓库的大小</p><h1 id="4-docker容器间的网络配置"><a href="#4-docker容器间的网络配置" class="headerlink" title="4. docker容器间的网络配置"></a>4. docker容器间的网络配置</h1><blockquote><p>4.1为什么需要网络功能</p></blockquote><p>Docker允许通过外部访问容器或容器互联的方式来提供网络服务</p><p>1.docker容器与操作系统的通信机制</p><p><img src="/2022/04/23/docker/image-20220424105048273.png" alt="image-20220424105048273"></p><p>2.docker网络使用</p><p>注意: 一般在使用docker网桥(bridge)实现容器与容器通信时,都是站在一个应用角度进行容器通信</p><p>3.查看docker默认网桥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker默认网桥</span><br>docker network ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建自己的网桥</span><br>docker create &lt;网桥名称&gt; -d bridge(默认桥接方式)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器时指定网桥</span><br>docker run -d -p 8080:8080 --network ems --name....<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置了network后可以通过名字访问,不在使用ip了</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用docker run --network时网桥必须存在</span><br></code></pre></td></tr></table></figure><h1 id="5-docker数据卷"><a href="#5-docker数据卷" class="headerlink" title="5. docker数据卷"></a>5. docker数据卷</h1><blockquote><p>5.1数据卷作用</p></blockquote><p>用来实现容器与宿主机之间的数据共享</p><blockquote><p>5.2数据卷特点</p></blockquote><ul><li>数据卷: 可以在容器之间共享和重用</li><li>对数据卷的修改会立即影响到对应的容器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-v后面的:ro 代表<span class="hljs-built_in">read</span> only 只读</span><br>docker run -d -p 8085:8080 --name tomcat5 -v /home/apps:/usrl/local/tomcat:ro tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><ul><li>对数据卷的更新修改,不会影响镜像</li><li>数据卷默认一直存在,即使容器删除</li></ul><blockquote><p>5.3数据卷操作</p></blockquote><p>1.自定义数据卷目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v 绝对路径:容器内路径<br></code></pre></td></tr></table></figure><p>2.自动创建数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -v 卷名:(容器内路径)<br></code></pre></td></tr></table></figure><p>3.docker操作数据卷指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看数据卷</span><br>docker volume ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看某个数据卷细节</span><br>docker volume inspect aa<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据卷</span><br>docker volume create bb<br></code></pre></td></tr></table></figure><h1 id="6-docker核心架构图"><a href="#6-docker核心架构图" class="headerlink" title="6. docker核心架构图"></a>6. docker核心架构图</h1><p><img src="/2022/04/23/docker/image-20220424150615720.png" alt="image-20220424150615720"></p><h1 id="7-docker安装服务"><a href="#7-docker安装服务" class="headerlink" title="7.docker安装服务"></a>7.docker安装服务</h1><h2 id="7-1-docker安装mysql"><a href="#7-1-docker安装mysql" class="headerlink" title="7.1 docker安装mysql"></a>7.1 docker安装mysql</h2><ol><li><p>在docker hub搜索对应服务的镜像</p></li><li><p>查看服务的描述和版本号</p></li><li><p>确定使用的版本进行pull</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql:5.6<br></code></pre></td></tr></table></figure><ol start="4"><li><p>使用镜像</p><p>4.1 基本启动mysql服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基本命令 -e 代表的environmenth</span><br>docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">example</span><br>docker run --name mysql-5.6 -r MYSQL_ROOT_PASSWORD=root -d mysql:5.6<br></code></pre></td></tr></table></figure><p>4.2 端口映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8087:3306 --name mysql1 -e MYSQL_ROOT_PASSWORD=root -v mysqldata:/var/lib/mysql mysql:5.6<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="7-2-docker安装tomcat"><a href="#7-2-docker安装tomcat" class="headerlink" title="7.2 docker安装tomcat"></a>7.2 docker安装tomcat</h2><blockquote><p>1.下载tomcat服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull tomcat:8.0-jre8<br></code></pre></td></tr></table></figure><blockquote><p>2.启动tomcat服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">2.1 启动tomcat服务</span><br>docker run -d -p 8081:8080 --name tomcat tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.2 将部署应用目录通过数据卷挂载宿主机系统</span><br>docker run -d -p 8081:8080 --name tomcat -v apps:/url/local/tomcat/webapps tomcat:8.0-jre8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">2.3 修改配置文件,并将配置文件挂载到宿主机系统</span><br>docker run -d -p 8081:8080 --name tomcat -v apps:/url/local/tomcat/webapps -v confs:/usr/local/tomcat/c tomcat:8.0-jre8<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Marked</title>
    <link href="/2022/03/28/Marked/"/>
    <url>/2022/03/28/Marked/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Vue页面中解析Md文件</p></blockquote><p>1.安装marked插件</p><figure class="highlight cmake"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> marked -S<br></code></pre></td></tr></table></figure><p>2.组件中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;w&quot;&gt;<br>    &lt;div v-html=&quot;articalContent&quot; class=&quot;markdown-body&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>const marked = require(&#x27;marked&#x27;)<br>import HelloWrold from &#x27;../note/HelloWorld.md&#x27;<br>import Shell from &#x27;../note/Shell.md&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      articalContent: &#x27;&#x27;<br>    &#125;<br>  &#125;,<br>  created() &#123;<br>    <br>    this.articalContent = marked(Shell)<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>  .w &#123;<br>    width: 1226px;<br>    margin: 0 auto;<br>  &#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>3.如果想引入外部md文件则</p><blockquote><p>3.1 安装插件</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> html-loader markdown-loader -S<br></code></pre></td></tr></table></figure><blockquote><p>3.2 配置 vue.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">chainWebpack</span>: <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    config.<span class="hljs-property">module</span><br>      .<span class="hljs-title function_">rule</span>(<span class="hljs-string">&#x27;md&#x27;</span>)<br>      .<span class="hljs-title function_">test</span>(<span class="hljs-regexp">/\.md/</span>)<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;html-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;html-loader&#x27;</span>)<br>      .<span class="hljs-title function_">end</span>()<br>      .<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;markdown-loader&#x27;</span>)<br>      .<span class="hljs-title function_">loader</span>(<span class="hljs-string">&#x27;markdown-loader&#x27;</span>)<br>      .<span class="hljs-title function_">end</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.调整样式</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> github-markdown-css<br></code></pre></td></tr></table></figure><blockquote><p>全局引入</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;github-markdown-css&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建个人博客</title>
    <link href="/2022/03/25/Hexo-Generate/"/>
    <url>/2022/03/25/Hexo-Generate/</url>
    
    <content type="html"><![CDATA[<p>这是一篇搭建Hexo个人博客的文章,主要介绍了关于通过Hexo搭建个人博客的过程常用命令,以及遇到的一些坑。</p><h1 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a>1.常用命令</h1><blockquote><p>1.1初始化博客项目</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs swift">hexo <span class="hljs-keyword">init</span> &lt;folder&gt;<br></code></pre></td></tr></table></figure><blockquote><p>1.2清除缓存</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br></code></pre></td></tr></table></figure><blockquote><p>1.3 编译</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo generation</span><br></code></pre></td></tr></table></figure><blockquote><p>1.4 本地运行</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span> <br></code></pre></td></tr></table></figure><blockquote><p>1.5 写作</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="2-个人搭建遇到的问题"><a href="#2-个人搭建遇到的问题" class="headerlink" title="2.个人搭建遇到的问题"></a>2.个人搭建遇到的问题</h1><blockquote><p>2.1图片解析问题</p></blockquote><ol><li><p>下载插件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-img<br></code></pre></td></tr></table></figure></li><li><p>修改_config.yml配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">post_asset_foler</span>  = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用相对路径引入文件</li></ol></li></ol><p>**注意:对于Windows用户一定一定要在引用图片时加.&#x2F;否则会报错,同时插件也必须是上面的插件,对于旧版产检i一样不好用</p><p><img src="/2022/03/25/Hexo-Generate/1.png" alt="测试图片"></p>]]></content>
    
    
    
    <tags>
      
      <tag>configure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/25/hello-world/"/>
    <url>/2022/03/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
